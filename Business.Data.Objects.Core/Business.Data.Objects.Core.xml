<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Business.Data.Objects.Core</name>
    </assembly>
    <members>
        <member name="T:Business.Data.Objects.Core.Attributes.AutoIncrement">
            <summary>
            Indica che una proprieta' e' un campo con generazione automatica di ID
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.AutoInsertTimestamp">
            <summary>
            Indica che il valore della proprieta' viene generato in fase di inserimento.
            E' possibile utilizzarlo su proprieta' semplici
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.AutomaticField">
            <summary>
            Indica che una proprieta' e' un campo con gestione automatica
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.AutoUpdateTimestamp">
            <summary>
            Indica che il valore della proprieta' (DateTime) viene generato in fase di inserimento ed aggiornato ad ogni update.
            E' possibile utilizzarlo su proprieta' semplici
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.BaseAttribute">
            <summary>
            Attributo base da cui ereditare
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.DefaultValue">
            <summary>
            Consente di definire il valore utilizzato come default.
            Note: 
            in caso di data il formato e' dd/mm/yyyy ed opzionalmente hh:mm:ss.
            in caso di numero decimale/double, ecc deve essere utilizzato il punto come separatore decimale. (es. 13.74)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.DefaultValue.Value">
            <summary>
            Valore impostato
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.DefaultValue.#ctor(System.String)">
            <summary>
            Costruttore
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.DefaultValue.ConvertTo(System.Type)">
            <summary>
            Converte il valore da stringa al tipo desiderato
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.AcceptNull">
            <summary>
            Indica che il campo accetta valore NULL (gestito come defaultvalue)
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.Encrypted">
            <summary>
            Identifica la proprieta' come criptata su db andando a codificare/decodificare il contenuto del campo DB.
            Il parametro keyProperty del costruttore identifica il nome di proprieta' dello slot che DEVE contenere la chiave
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Encrypted.#ctor(System.String,System.Int32)">
            <summary>
            Viene richiesto il nome della Property dello slot che conterra' la chiave e la lunghezza del campo da verificare (per evtare che il dato piu' lungo possa essere troncato)
            </summary>
            <param name="slotEncDefinitionKey"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Encrypted.IsEncrypted(System.String)">
            <summary>
            Verifica se il testo criptato e' conforme allo standard
            </summary>
            <param name="encText"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Encrypted.Encrypt(Business.Data.Objects.Core.BusinessSlot,Business.Data.Objects.Core.Schema.Definition.Property,System.String)">
            <summary>
            Cripta il testo fornito
            </summary>
            <param name="obj"></param>
            <param name="clearText"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Encrypted.Decrypt(Business.Data.Objects.Core.BusinessSlot,Business.Data.Objects.Core.Schema.Definition.Property,System.String)">
            <summary>
            Decripta il testo fornito
            </summary>
            <param name="obj"></param>
            <param name="encText"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.ExcludeFromInsert">
            <summary>
            Indica se una proprieta' deve essere esclusa da operazione di INSERT (sul db)
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.ExcludeFromUpdate">
            <summary>
            Indica se una proprieta' deve essere esclusa da operazione di UPDATE (sul db)
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.ExcludeFromXml">
            <summary>
            Indica che il campo non deve essere incluso nell'output XML
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.GlobalCache">
            <summary>
            Attributo che indica se l'oggetto deve essere mantenuto nella cache della sessione
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.LoadOnAccess">
            <summary>
            Indica che il valore del campo va caricato dal db solo al primo accesso
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.LogicalDelete">
            <summary>
            Indica che una proprieta' e' un campo che viene aggiornato in caso di cancellazione dell'oggetto
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.ReadOnly">
            <summary>
            Imposta una classe come sola lettura impossibilitando accessi di tipo
            Insert, Update, Delete
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.UserInfo">
            <summary>
            Indica che la proprieta' deve essere gestita in automatico attribuendo il valore prelevato da
             - evento slot.OnUserInfoRequired
             - in alternativa da slot.Username
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.PrimaryKey">
            <summary>
            Definizione di proprieta PrimaryKey
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.PrimaryKey.#ctor">
            <summary>
            Costruttore
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.SearchKey">
            <summary>
            Indica che una proprieta' fa parte di una chiave identificata dal nome fornito
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.SearchKey.KeyName">
            <summary>
            Nome della chiave
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.SearchKey.#ctor(System.String)">
            <summary>
            Imposta chiave di ricerca con nome fornito e operatore di default (=)
            </summary>
            <param name="keyName"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.PropertyMap">
            <summary>
            Consente di definire la dipendenza di una proprieta' rispetta ad una o piu'
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.PropertyMap.Names">
            <summary>
            Indica i nomi delle proprieta' mappate
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.PropertyMap.#ctor(System.String[])">
            <summary>
            Crea istanza di PropertyMap specificando Nome ed ordine
            </summary>
            <param name="propertyNames"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.BaseModifierAttribute">
            <summary>
            Attributo che non necessita di valore
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.BaseModifierAttribute.CanApplyToProperty(Business.Data.Objects.Core.Schema.Definition.Property)">
            <summary>
            Indica se applicabile alla proprieta' fornita
            </summary>
            <param name="propIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.BaseModifierAttribute.Modify(System.Object)">
            <summary>
            Esegue la modifica
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.BaseStringModifierAttribute">
            <summary>
            Attributo che non necessita di valore
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.BaseStringModifierAttribute.CanApplyToProperty(Business.Data.Objects.Core.Schema.Definition.Property)">
            <summary>
            Indica se applicabile alla proprieta' fornita
            </summary>
            <param name="propIn"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.LowerCase">
            <summary>
            Il campo viene impostato con caratteri minuscoli
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.LowerCase.Modify(System.Object)">
            <summary>
            Esegue modifica
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.PadLeft">
            <summary>
            Se la lunghezza supera quella impostata il dato viene troncato
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.PadRight">
            <summary>
            Se la lunghezza supera quella impostata il dato viene troncato
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.RemoveAccents">
            <summary>
            Indica che verranno rimossi i caratteri accentati
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.Trim">
            <summary>
            Indica il trim del campo
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Trim.Modify(System.Object)">
            <summary>
            Esegue modifica
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.Truncate">
            <summary>
            Se la lunghezza supera quella impostata il dato viene troncato
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.Column">
            <summary>
            Consente di definire più specificamente una colonna in tabella
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.Column.DbType">
            <summary>
            Tipo DB
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.Column.Name">
            <summary>
            Nome della colonna
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.Column.ParamName">
            <summary>
            Ritorna nome parametro
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Column.#ctor(System.String)">
            <summary>
            Costruttore semplice con nome colonna
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Column.#ctor(System.String,System.Type)">
            <summary>
            Costruttore con nome colonna e tipo db
            </summary>
            <param name="columnName"></param>
            <param name="dbType"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Column.#ctor(System.String,System.Type,System.String)">
            <summary>
            Costruttore completo con nome colonna, tipo db e nome parametro
            </summary>
            <param name="columnName"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Column.GetKeyParamName">
            <summary>
            Ritorna il nome del parametro associato
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.CustomDbType">
            <summary>
            Consente di impostare un tipo di dato specifico del provider da utilizzare nelle query
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.CustomDbType.Value">
            <summary>
            Tipo di dato del provider
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.CustomDbType.#ctor(System.Data.DbType)">
            <summary>
            Imposta il tipo di dato forzato da utilizzare nelle query
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.DbConnection">
            <summary>
            Indica la connessione database all'interno del businessslot da utilizzare 
            (Necessario in caso di mappature di oggetti su database differenti)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.DbConnection.#ctor(System.String)">
            <summary>
            Imposta nome standard di connessione
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Business.Data.Objects.Core.Attributes.Table.IsSimpleTableName">
            <summary>
            Indica se il nome tabella e' utilizzabile da solo e non necessita di aggiunte di nomi db
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Table.#ctor(System.String)">
            <summary>
            Imposta nome standard di tabella
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Table.#ctor(System.String,System.String)">
            <summary>
            Imposta il nome della tabella ed il nome della chiave del prefisso db che andra' inserito nello slot a runtime
            </summary>
            <param name="tableName"></param>
            <param name="dbPrefixKey"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.Table.#ctor(System.String,System.String,System.String)">
            <summary>
            Imposta nome tabella, chiave prefisso db e chiave connessione
            </summary>
            <param name="tableName"></param>
            <param name="dbPrefixKey"></param>
            <param name="dbConnKey"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.BaseValidatorAttribute.CanApplyToProperty(Business.Data.Objects.Core.Schema.Definition.Property)">
            <summary>
            Indica se applicabile a proprieta' specificata
            </summary>
            <param name="propIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.BaseValidatorAttribute.Validate(Business.Data.Objects.Core.Schema.Definition.Property,System.Object)">
            <summary>
            Esegue la validazione
            </summary>
            <param name="propIn"></param>
            <param name="value"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.DecimalRange">
            <summary>
            Range di valori per proprietà integer
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.DoubleRange">
            <summary>
            Range di valori per proprietà integer
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.IntRange">
            <summary>
            Range di valori per proprietà integer
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.MaxLength">
            <summary>
            Lunghezza massima consentita per il campo
            (Verrà preconvertito a stringa)
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.MinLength">
            <summary>
            Lunghezza minima consentita per il campo
            (Verrà preconvertito a stringa)
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.ValidateRegex">
            <summary>
            Imposta un'espressione regolare per la validazione del campo
            (Verrà preconvertito a stringa)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Attributes.ValidateRegex.CanApplyToProperty(Business.Data.Objects.Core.Schema.Definition.Property)">
            <summary>
            Indica se applicabile alla proprieta'
            </summary>
            <param name="propIn"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Attributes.XmlFormatString">
            <summary>
            Imposta una stringa di formattazione con cui verrà formattato il valore nell'output Xml
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Common.Resources.ObjectMessages">
            <summary>
              Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.ResourceManager">
            <summary>
              Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Culture">
            <summary>
              Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
              ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_CloneDisabledTracking">
            <summary>
              Cerca una stringa localizzata simile a {0} - Impossibile eseguire un Clone dell&apos;oggetto in quanto e&apos; attivo l&apos;Object Reference Tracking.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_Delete_Null">
            <summary>
              Cerca una stringa localizzata simile a {0} - Impossibile eseguire eliminare un oggetto nullo..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_DiffSourceNotLoaded">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile eseguire il confronto con il sorgente (database) poiche&apos; l&apos;oggetto non risulta caricato (non salvato)..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_IndexOutOfBounds">
            <summary>
              Cerca una stringa localizzata simile a {0} - L&apos;indice fornito ({1}) non appartiene alla lista.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_InvalidProperty">
            <summary>
              Cerca una stringa localizzata simile a {0} - La proprieta&apos; {1} non puo&apos; essere utilizzata per l&apos;operazione richiesta..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_KeyNotFound">
            <summary>
              Cerca una stringa localizzata simile a {0} - La chiave {1} non e&apos; definita..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_KeyValuesLessThanFields">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il numero di valori forniti in input per la Chiave {1} e&apos; minore del numero di campi da valorizzare..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_KeyValuesMoreThanFields">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il numero di valori forniti in input per la Chiave {1} e&apos; maggiore del numero di campi da valorizzare..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_KeyValuesNoMatch">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il numero di valori forniti in input per la Chiave {1} differisce dal numero di campi da valorizzare ({2})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_NoDbPrefixDefined">
            <summary>
              Cerca una stringa localizzata simile a {0} - La definizione della classe prevede che nello Slot sia specificato un DbPrefixKey con chiave &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_NoValueForKey">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stato specificato alcun valore per la Chiave {1}..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_Null_Input">
            <summary>
              Cerca una stringa localizzata simile a {0} - L&apos;operazione non e&apos; consentita su un oggetto nullo..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_OperatorUnknown">
            <summary>
              Cerca una stringa localizzata simile a Operatore non riconosciuto.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_OperatorUnsupportedOnProperty">
            <summary>
              Cerca una stringa localizzata simile a Operatore non supportato su proprieta&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_ProcMethodBadArg">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il metodo &quot;{1}&quot; definito per la proprieta&apos; {2} deve avere un solo parametro dello stesso tipo della proprieta&apos;..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_ProcMethodNotFound">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il metodo &quot;{1}&quot; definito per la proprieta&apos; {2} non esiste..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_PropertyNotComparable">
            <summary>
              Cerca una stringa localizzata simile a {0} - La proprieta&apos; {1} non consente comparazioni..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_PropertyNotExists">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non esiste alcuna proprieta&apos; {1}..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_PropLoadObjectLoaded">
            <summary>
              Cerca una stringa localizzata simile a {0} - Per eseguire il caricamento sul primo accesso della proprieta&apos; {1} e&apos; necessario che l&apos;oggetto sia in stato caricato..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_Record_Filter_NotFound">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stato trovato alcun record per il filtro specificato..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_RecordKeyMultiple">
            <summary>
              Cerca una stringa localizzata simile a {0} - Esistono piu&apos; record con Chiave {1} ({2})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_RecordKeyNotFound">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stato trovato alcun record per Chiave {1} = ({2})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_Save_Null">
            <summary>
              Cerca una stringa localizzata simile a {0} - Impossibile salvare un oggetto nullo..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_SwithToNullSession">
            <summary>
              Cerca una stringa localizzata simile a Lo slot che si sta impostando risulta essere nullo o gia&apos; terminato..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Base_XmlNodeNotFound">
            <summary>
              Cerca una stringa localizzata simile a {0} - L&apos;XML fornito non contiene alcun nodo &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Deleted_CannotGetProperty">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile accedere alle proprieta&apos; di un oggetto eliminato..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Deleted_CannotSetProperty">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile impostare proprieta&apos; di un oggetto eliminato..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Deleted_MultipleRecords">
            <summary>
              Cerca una stringa localizzata simile a {0} - Sono stati eliminati piu&apos; record con Chiave {1} ({2})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Deleted_NoAction">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile eseguire operazioni su un oggetto eliminato.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Deleted_NoRecord">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stato eliminato alcun record con Chiave {1} ({2})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Diff_Null">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile eseguire un confronto con un oggetto nullo..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Diff_WrongType">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile eseguire un confronto con un oggetto di tipo differente ({1})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Edit_MultipleRecords">
            <summary>
              Cerca una stringa localizzata simile a {0} - Sono stati aggiornati piu&apos; record con Chiave {1} ({2})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Edit_NoRecord">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stato possibile eseguire l&apos;aggiornamento poiche&apos; non trovato il record per Chiave {1} ({2})..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Enc_Decrypt_Failure">
            <summary>
              Cerca una stringa localizzata simile a {0} - La proprieta&apos; {1} non puo&apos; essere decriptata: {2}.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Enc_Encrypt_Failure">
            <summary>
              Cerca una stringa localizzata simile a {0} - La proprieta&apos; {1} non puo&apos; essere criptata: {2}.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.List_CannotAddUnsavedObjects">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile aggiungere oggetti nulli o non salvati.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.List_CannotAggregateNonNumeric">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile eseguire operazioni di aggregazione sulla proprieta&apos; &apos;{1}&apos; non numerica.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.List_CannotBuildIndex">
            <summary>
              Cerca una stringa localizzata simile a {0} - Indicizzazione fallita. Sono presenti oggetti &apos;{1}&apos; con medesima Primary Key &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.List_CannotSetCacheResult">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile attivare la cache dei risultati in quanto non configurata la cache esterna oppure transazione in atto..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.List_NullDelegate">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il delegato fornito in input non puo&apos; essere NULL..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.List_UnknownColumn">
            <summary>
              Cerca una stringa localizzata simile a {0} - La colonna {1} esiste. E&apos; necessario che la query di caricamento lista contenga tale nome..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.New_CannotDelete">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile eliminare un oggetto non salvato in precedenza..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.New_NoRecord">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stato inserito alcun record..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.New_NullNotAllowed">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stato impostato alcun valore per la proprieta&apos; {1}..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.OperationFail_SaveOrDelete">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; possibile eseguire l&apos;operazione poiche&apos; esplicitamente disabilitata in fase di progettazione (READONLY)..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Prop_Enc_Wrong_Length">
            <summary>
              Cerca una stringa localizzata simile a {0} - La codifica del valore della proprieta&apos; eccede la massima dimensione del campo specificata ({1}).
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Property_Cannot_Set">
            <summary>
              Cerca una stringa localizzata simile a {0} - La proprieta&apos; {1} non puo&apos; essere impostata poiche&apos; in sola lettura oppure gestita automaticamente..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Validate_IntRange">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il valore della proprieta&apos; {1} non rientra nell&apos;intervallo imposto {2}-{3}..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Validate_MaxLength">
            <summary>
              Cerca una stringa localizzata simile a {0} - La lunghezza della proprieta&apos; {1} e&apos; superiore al vincolo imposto di {2} caratteri..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Validate_MinLength">
            <summary>
              Cerca una stringa localizzata simile a {0} - La lunghezza della proprieta&apos; {1} non supera il vincolo imposto di almeno {2} caratteri..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Validate_PrimaryKeyModified">
            <summary>
              Cerca una stringa localizzata simile a {0} - La proprieta&apos; {1} e&apos; o fa parte della PrimaryKey: la modifica non e&apos; ammessa..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.Validate_Regex">
            <summary>
              Cerca una stringa localizzata simile a {0} - La proprieta&apos; {1} non rispetta l&apos;espressione di validazione impostata..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.ObjectMessages.ValidateProperties_Failure">
            <summary>
              Cerca una stringa localizzata simile a {0} - La validazione base delle proprieta&apos; e&apos; fallita. La lista messaggi contiene i dettagli sugli errori..
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Common.Resources.SchemaMessages">
            <summary>
              Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.ResourceManager">
            <summary>
              Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Culture">
            <summary>
              Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
              ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Attr_MultipleDefinition">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Non e&apos; permessa la definizione multipla dell&apos;attributo {2} sulla stessa proprieta&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Case_OnlyOne">
            <summary>
              Cerca una stringa localizzata simile a E&apos; permessa una sola modalita&apos; di trasformazione stringhe tra UpperCase e LowerCase.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Column_SameOrder">
            <summary>
              Cerca una stringa localizzata simile a Impossibile mappare colonna {0} con ordine {1} poiche&apos; lo stesso ordine appartiene alla colonna {2}..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.DbConnectionAlreadyDefined">
            <summary>
              Cerca una stringa localizzata simile a {0} - La connessione DB puo&apos; essere definita a livello di attributo Table o attributo DbConnection ma non su entrambi.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.DBType_NotFound">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Il tipo fornito per il database (&apos;{2}&apos;) non esiste..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.ExtraFeature_OnlyOne">
            <summary>
              Cerca una stringa localizzata simile a E&apos; permessa una sola funzionalita&apos; tra: AutoIncrement, AutoInsertTimestamp, AutoUpdateTimestamp.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.PrimaryKey_Mismatch">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - La Primary Key non corrisponde a quella dell&apos;oggetto in input..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.PrimaryKey_NotSet">
            <summary>
              Cerca una stringa localizzata simile a {0} - Non e&apos; stata definita alcuna PrimaryKey.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_AutoInc_32_Bit">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - La proprieta&apos; di tipo AutoIncrement deve essere di tipo intero di almeno 32 bit.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_AutoIncAcceptNull">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Una proprietà con attributo AutoIncrement non puo&apos; avere attributo AcceptNull..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_AutoIncOnlySimple">
            <summary>
              Cerca una stringa localizzata simile a ..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_Encryped_Only_String">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - E&apos; possibile definire criptata solo una proprieta&apos; di tipo &quot;string&quot;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_ErrorTimestamp">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Non e&apos; possibile definire contemporaneamente gli attributi InsertTimestamp che UpdateTimestamp..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_KeyNeedValueQuery">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - L&apos;appartenenza ad una chiave necessita che la proprieta&apos; sia valorizzata nella query standard.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_LogicalDeleteWrongType">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - La cancellazione logica necessita di una proprieta&apos; di tipo intero (di qualunque dimensione byte, int16, int32, int64), booleano o datetime.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_Must_Be_List">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - La proprieta&apos; deve essere una lista.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_MustBeReadOnlyForAttribute">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - L&apos;attributo {2} necessita che la proprieta&apos; sia di sola lettura .
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_NoArrayBytes">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - E&apos; consentito il solo array di tipo byte..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_NoLowerUpperCase">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Non e&apos; possibile definire una proprieta&apos; come LowerCase e UpperCase contemporaneamente.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_NoMultipleAutomatic">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Non e&apos; possibile definire una proprieta&apos; con più attributi automatici (AutoIncrement, AutoInsertTimestamp, AutoUpdateTimestamp, ConcurrencyControl).
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_ObjectSpecifyColumns">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Una proprietà mappata su oggetto deve contenere almeno una definizione Column..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_ObjectSpecifyOrder">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - E&apos; necessario specificare un Order dato per l&apos;attributo Column in quanto presenti piu&apos; attributi Column. Il sistema non e&apos; in grado di garantire l&apos;ordinamento specificato in fase di definizione (gli attributi possono venire letti al contrario!).
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_ObjectSpecifySubType">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - E&apos; necessario specificare un tipo dato per l&apos;attributo Column..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_PrimaryKey_SimpleType">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - E&apos; possibile definire una PrimaryKey solo su proprieta&apos; non mappate..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_PropertyMapMissingNames">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Il PropertyMap necessita la specifica di almeno 1 nome proprieta&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_PropertyMapMustBeFirst">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Il PropertyMap e&apos; necessita che la proprieta&apos; puntata esista e che venga definita prima (nel codice) rispetta alla proprieta&apos; che la mappa. ({2}).
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_PropertyMapReadonly">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Il PropertyMap e&apos; consentito su una proprieta&apos; di tipo oggetto BDO in sola lettura e non ammette la definizione di attributi Column.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_PropertyMapToSimple">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Il PropertyMap e&apos; necessita che la proprieta&apos; puntata deve essere di tipo semplice.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_StoredProcedure_First">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Il nome della stored procedure associata ad una chiave multipla va specificato solo sulla prima proprieta&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Prop_XmlTagUnused">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - L&apos;attributo XmlTag e&apos; valido solo se non fornita una definizione per la colonna (dove e&apos; gia&apos; possibile specificarlo)..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Property_OnlyOneColumn">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - Non e&apos; possibile definire piu&apos; colonne su una proprietà di tipo semplice..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Schema_AlreadyExists">
            <summary>
              Cerca una stringa localizzata simile a Non e&apos; possibile caricare lo schema per la classe &apos;{0}&apos; poiche&apos; gia&apos; esistente..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Schema_NoPrimaryKey">
            <summary>
              Cerca una stringa localizzata simile a {0} - E&apos; necessario definire una PrimaryKey..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Schema_NoProperties">
            <summary>
              Cerca una stringa localizzata simile a {0} - E&apos; necessario definire almeno una proprieta&apos;..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Schema_NotFound">
            <summary>
              Cerca una stringa localizzata simile a Lo schema per il tipo &apos;{0}&apos; non risulta essere caricato..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SchemaMessages.Type_NotApplicable">
            <summary>
              Cerca una stringa localizzata simile a {0}.{1} - L&apos;attributo {2} e&apos; valido solo per proprieta&apos; di tipo &quot;string&quot;..
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Common.Resources.SessionMessages">
            <summary>
              Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.ResourceManager">
            <summary>
              Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.Culture">
            <summary>
              Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
              ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.CacheSizeNotValid">
            <summary>
              Cerca una stringa localizzata simile a La dimensione di cache fornita &apos;{0}&apos; non e&apos; valida. Il valore consentito è tra 1 e 10000..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.Cannot_Delete_Default_DB">
            <summary>
              Cerca una stringa localizzata simile a Non e&apos; possibile eliminare il database di default.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.CannotChangeCacheSizeNoEmpty">
            <summary>
              Cerca una stringa localizzata simile a E&apos; possibile variare la dimensione della cache della sessione solo se vuota..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.Clone_LiveTrack_Not_Allowed">
            <summary>
              Cerca una stringa localizzata simile a Impossibile clonare un oggetto in quanto e&apos; attivo il Live Tracking.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.Compare_Null">
            <summary>
              Cerca una stringa localizzata simile a Non e&apos; possibile comparare sessioni nulle..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.CustomLog_Not_Initialized">
            <summary>
              Cerca una stringa localizzata simile a {0} - Il custom log va inizializzato chiamando il metodo InitCustomLog(filename).
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.DB_Not_Exist">
            <summary>
              Cerca una stringa localizzata simile a Non esiste alcun database registrato con nome &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.Initialization_Error">
            <summary>
              Cerca una stringa localizzata simile a Errore nella inizializzazione dell&apos;ambiente: {0}.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.LoadObj_Filter_Null">
            <summary>
              Cerca una stringa localizzata simile a La ricerca per filtro necessita di un filtro valorizzato.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Common.Resources.SessionMessages.LoadObj_Key_NoValue">
            <summary>
              Cerca una stringa localizzata simile a La ricerca per chiave &apos;{0}&apos; deve contenere almeno un parametro di ricerca.
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Database.Resources.DatabaseMessages">
            <summary>
              Classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.ResourceManager">
            <summary>
              Restituisce l'istanza di ResourceManager nella cache utilizzata da questa classe.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Culture">
            <summary>
              Esegue l'override della proprietà CurrentUICulture del thread corrente per tutte le
              ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Assembly_Load_Error">
            <summary>
              Cerca una stringa localizzata simile a Errore caricamento classe Factory da &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Assembly_Not_Found">
            <summary>
              Cerca una stringa localizzata simile a Assembly {0} non trovato.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Cannot_Get_lock">
            <summary>
              Cerca una stringa localizzata simile a Impossibile acquisire il lock richiesto ({0}).
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Cannot_Release_Lock">
            <summary>
              Cerca una stringa localizzata simile a Impossibile rilasciare il lock richiesto ({0}) poiche&apos; ottenuto da altro chiamante.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.ConnKey_NotFound">
            <summary>
              Cerca una stringa localizzata simile a La Chiave di ConnectionString fornita &quot;{0}&quot; non esiste nel web.config/app.config.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Lock_Not_Acquired">
            <summary>
              Cerca una stringa localizzata simile a Il lock {0} non e&apos; acquisito.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Lock_Reference_Null">
            <summary>
              Cerca una stringa localizzata simile a Il lock richiesto non risulta registrato su questa istanza di database.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Not_Implemented">
            <summary>
              Cerca una stringa localizzata simile a Il database corrente ({0}) non supporta la funzionalita&apos; richiesta.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Provider_Unknown">
            <summary>
              Cerca una stringa localizzata simile a Il provider {0} non e&apos; riconosciuto. Le possibili opzioni sono: MSSQLDataBase, MSSQL2005DataBase, MYSQLDataBase, SQLITEDataBase.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Query_Empty">
            <summary>
              Cerca una stringa localizzata simile a Lo statement SQL non e&apos; valorizzato. Attenzione: dopo ciascuna esecuzione viene cancellato sia lo statement SQL che i parametri..
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.TraceLog_Return_ERR">
            <summary>
              Cerca una stringa localizzata simile a Esito: ERROR.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.TraceLog_Return_OK">
            <summary>
              Cerca una stringa localizzata simile a Esito: OK.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Transaction_DbList_OnlyOne">
            <summary>
              Cerca una stringa localizzata simile a Transazione gia&apos; apera: e&apos; possibile aprire un&apos;unica transazione su una lista di DB.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Database.Resources.DatabaseMessages.Transaction_Not_Open">
            <summary>
              Cerca una stringa localizzata simile a Transazione non aperta.
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.SchemaReaderException">
            <summary>
            Eccezione da errore schema
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.ClassSchema">
            <summary>
            Definizione di Schema
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.ClassSchema.IsReadOnly">
            <summary>
            Indica se la classe e' in sola lettura
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.ClassSchema.IsDefaultDb">
            <summary>
            Indica se utilizza la connessione db di default
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.ClassSchema.Validate">
            <summary>
            Esegue validazione schema
            </summary>
            <param name="oSchema"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.ClassSchema.FillFromAttribute(System.Attribute)">
            <summary>
            Carica informazioni da attributo
            </summary>
            <param name="att"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.Key">
            <summary>
            Definizione di chiave
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Key.AddProperty(Business.Data.Objects.Core.Schema.Definition.Property)">
            <summary>
            Aggiunge proprietà a chiave
            </summary>
            <param name="oPropIn"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Key.FillKeyQueryWhereParams(Business.Data.Objects.Database.IDataBase,Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Imposta i parametri da utilizzare nella where utilizzando quanto gia' presente nell'oggetto di input
            </summary>
            <param name="dbIn"></param>
            <param name="objIn"></param>
            <returns>L'array contente i valori della key utilizzati</returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Key.FillKeyQueryWhereParams(Business.Data.Objects.Database.IDataBase,System.Object[])">
            <summary>
            Imposta i parametri da utilizzare nella where utilizzando l'array di input per i valori della key
            </summary>
            <param name="dbIn"></param>
            <param name="keyValuesIn"></param>
            <returns>L'array contente i valori della key utilizzati</returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Key.GetValues(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Ritorna array con dati
            </summary>
            <param name="obj"></param>
            <param name="forDbIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Key.GetValuesForDb(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Ritorna array con dati per db
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.Property">
            <summary>
            Definizione di proprietà
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.Property.HasPropertyMaps">
            <summary>
            Indica se presenti property map
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.Property.ExcludeSelect">
            <summary>
            Indica se la proprieta' va inclusa nella query di selezione standard
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.Property.Fullname">
            <summary>
            Ritorna il nomeclasse.nomeproprieta'
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Property.ValidateDefinition">
            <summary>
            Esegue validazione formale di tutti i valori immessi
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Property.PerformValidation(System.Object)">
            <summary>
            Esegue la validazione secondo le regole impostate
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Property.FillFromAttribute(Business.Data.Objects.Core.Attributes.BaseAttribute)">
            <summary>
            Imposta valori a partire da attributo
            </summary>
            <param name="attr"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.Property.IsNull(System.Object)">
            <summary>
            Indica se il valore della proprieta' e' considerabile Null
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.PropertyDictionary">
            <summary>
            Elenco Proprietà
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyDictionary.Add(Business.Data.Objects.Core.Schema.Definition.Property)">
            <summary>
            Aggiunge proprietà e crea indive
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyDictionary.GetPropertyByName(System.String)">
            <summary>
            Cerca proprietà per nome
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyDictionary.ContainsProperty(System.String)">
            <summary>
            Verifica esistenza proprieta per nome
            </summary>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyDictionary.TryGetProperty(System.String,Business.Data.Objects.Core.Schema.Definition.Property@)">
            <summary>
            Verifica esistenza proprieta e ritorna valore
            </summary>
            <param name="propName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.DataFlags">
            <summary>
            Flag di gestione dati BDO
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.PropertyList">
            <summary>
            Elenco Proprietà
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.PropertyObject">
            <summary>
            Definizione di proprietà
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyObject.GetValueForDb(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Ritorna il dato compatibile db
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyObject.GetValue(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Ritorna il valore della proprieta'
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyObject.SetValue(Business.Data.Objects.Core.Base.DataObjectBase,System.Object)">
            <summary>
            Metodo privato di impostazione proprietà
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyObject.WriteXml(Business.Data.Objects.Common.Utils.XmlWrite,Business.Data.Objects.Core.Base.DataObjectBase,System.Int32)">
            <summary>
             Crea rappresentazione Xml
            </summary>
            <param name="xw"></param>
            <param name="obj"></param>
            <param name="depth"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertyObject.SetValueFromReader(Business.Data.Objects.Core.Base.DataObjectBase,System.Data.IDataReader)">
            <summary>
            Carica valori proprieta' da datareader
            </summary>
            <param name="obj"></param>
            <param name="dr"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Definition.PropertySimple">
            <summary>
            Definizione di proprietà
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.PropertySimple.HasValidators">
            <summary>
            Indica se presenti validatori
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.PropertySimple.HasModifiers">
            <summary>
            Indica se presenti modificatori
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Schema.Definition.PropertySimple.ExcludeSelect">
            <summary>
            Indica se esclusa dal caricamento standard (query load)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertySimple.GetValue(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Ritorna il valore della proprieta'
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertySimple.GetValueForDb(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Ritorna il dato compatibile db
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertySimple.SetValue(Business.Data.Objects.Core.Base.DataObjectBase,System.Object)">
            <summary>
            Metodo privato di impostazione proprietà
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertySimple.PerformValidation(System.Object)">
            <summary>
            Esegue validazione
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertySimple.WriteXml(Business.Data.Objects.Common.Utils.XmlWrite,Business.Data.Objects.Core.Base.DataObjectBase,System.Int32)">
            <summary>
            Scrive valore per Xml
            </summary>
            <param name="xw"></param>
            <param name="obj"></param>
            <param name="depth"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Definition.PropertySimple.SetValueFromReader(Business.Data.Objects.Core.Base.DataObjectBase,System.Data.IDataReader)">
            <summary>
            Carica valori proprieta' da datareader
            </summary>
            <param name="obj"></param>
            <param name="dr"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Schema.Usage.DataSchema">
            <summary>
            Classe contenente i dati di un oggetto business
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Usage.DataSchema.#ctor">
            <summary>
            Costruttore privato per gestire in autonomia la deserializzazione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Usage.DataSchema.#ctor(System.Int32,System.Int32)">
            <summary>
            Crea dataschema a partire da class schema
            </summary>
            <param name="schema"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Usage.DataSchema.GetFlagsAll(System.Int32,Business.Data.Objects.Core.Schema.Definition.DataFlags)">
            <summary>
            Ottien valore di uno o gruppo di flag
            </summary>
            <param name="index"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Usage.DataSchema.SetFlags(System.Int32,Business.Data.Objects.Core.Schema.Definition.DataFlags,System.Boolean)">
            <summary>
            Imposta valore flag
            </summary>
            <param name="index"></param>
            <param name="flag"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Usage.DataSchema.Clone(System.Boolean,System.Boolean)">
            <summary>
            Genera clone del dataschema (per valore)
            </summary>
            <param name="oSlotIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Schema.Usage.DataSchema.ToString">
            <summary>
            Ritorna la rappresentazione in stringa
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.BusinessObjectBase">
            <summary>
            Classe base per oggetti Business
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.BusinessObjectBase.ToJSON">
            <summary>
            Ritorna rappresentazione JSON
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.DataListBase">
            <summary>
            Classe base per definizione liste
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.DataListBase.IsPaged">
            <summary>
            Indica se la lista e' paginata
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.DataListBase.Pager">
            <summary>
            Paginatore
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.DataListBase.Count">
            <summary>
            Numero elementi
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.fireListChanged(System.ComponentModel.ListChangedType,System.Int32)">
            <summary>
            Lancia evento se definito
            </summary>
            <param name="eventtype"></param>
            <param name="index"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.fillListFromReader(System.Data.Common.DbDataReader)">
            <summary>
            Riempie la lista interna da reader
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.resetList">
            <summary>
            Resetta le liste interne
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.getItem(System.Int32)">
            <summary>
            Ritorna item dalla lista (caricandolo se necessario)
            </summary>
            <param name="index"></param>
            <param name="dalType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.doSearch">
            <summary>
            Esegue la ricerca
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.getIndexOfByPK(System.Object[])">
            <summary>
            Trova un elemento fornendo valori PrimaryKey
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.searchByColumn(Business.Data.Objects.Core.IFilter)">
            <summary>
            Ricerca attraverso un filtro di colonna
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.searchByCustomWhere(System.String)">
            <summary>
            Ricerca attraverso un filtro di colonna
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.setLogicalDelete(Business.Data.Objects.Database.IDataBase,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Imposta l'eventale query per escludere le cancellazioni logiche
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.orderBy(System.String,Business.Data.Objects.Core.OrderVersus)">
            <summary>
            Imposta il campo di sort e la direzione di sort
            Da utilizzare subito prima dell'esecuzione della ricerca.
            </summary>
            <param name="sortField"></param>
            <param name="versus"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.orderBy(Business.Data.Objects.Core.OrderBy)">
            <summary>
            Imposta Order By passando direttamente tutto l'oggetto orderby
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.GetPagingXml">
            <summary>
            Ritorna Xml per la gestione della paginazione
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.SwitchToSlot(Business.Data.Objects.Core.BusinessSlot)">
            <summary>
            Imposta uno slot sulla lista corrente
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.ToJSON">
            <summary>
            Ritorna elenco oggetti in formato JSON
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.ToString">
            <summary>
            Override ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.ToXml(System.Int32)">
            <summary>
            Scrive xml lista
            </summary>
            <param name="depht"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.ToXml">
            <summary>
            Rappresentazione XML
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.GetExtraValue(System.Int32,System.String)">
            <summary>
            Ritorna un valore accessorio ripreso dalla query di caricamento lista.
            Utile per ricerche che ritornano dati aggiuntivi rispetto agli oggetti stessi
            </summary>
            <param name="index"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.Clear">
            <summary>
            Svuota la lista
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataListBase.toPagedList(System.Int32,System.Int32)">
            <summary>
            Data una lista ritorna una sottolista paginata
            </summary>
            <param name="page"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.DataObjectBase">
            <summary>
            Classe base per la gestione degli oggetti persistenti
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.DataObjectBase.ObjectRefId">
            <summary>
            Riferimento univoco assegnato all'istanza dell'oggetto
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.DataObjectBase.ObjectSource">
            <summary>
            Indica la provenienza dell'oggetto
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.DataObjectBase.ObjectState">
            <summary>
            Indica lo stato interno dell'oggetto
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.firePropertyChanged(Business.Data.Objects.Core.Schema.Definition.Property)">
            <summary>
            Esegue l'evento di property change del databindings
            </summary>
            <param name="propIn"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.SetProperty(System.Int32,System.Object)">
            <summary>
             Funzione per impostare il valore di proprietà
            </summary>
            <param name="propertyIndex"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.GetProperty(System.Int32)">
            <summary>
            Funzione interna per ottenere il valore di proprietà
            </summary>
            <param name="propertyIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.ToString">
            <summary>
            Ritorna la rappresentazione in stringa dell'oggetto
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.ToXml">
            <summary>
            Ritorna una rappresentazione XML dell'oggetto senza navigazione nei sotto oggetti
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.ToXml(System.Int32)">
            <summary>
            Ritorna rappresentazione Xml dell oggetto fornendo il livello di profondita' (navigazione sotto-oggetti)
            0 indica non navigare nei sotto-oggetti
            Prestare attenzione ad eventuali riferimenti circolari
            </summary>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.ToJSON">
            <summary>
            Ritorna rappresentazione  JSON dell'oggetto (per serializzazione)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.FromJSON(System.String)">
            <summary>
            Carica i dati di un JSON sull'oggetto (per deserializzazione)
            </summary>
            <param name="json"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.IsNull(System.String)">
            <summary>
            Verifica se una proprietà ha valore considerato null
            </summary>
            <param name="propName"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.IsChanged(System.String)">
            <summary>
            Indica se la proprieta' specificata e' stata modificata 
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.GetCurrentChanges">
            <summary>
            Ritorna elenco di proprieta' modificate
            Attenzione! Dopo il salvataggio le proprieta' risultano non modificate!
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.Validate">
            <summary>
            Da implementare per eseguire la validazione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.DoSave">
            <summary>
            Salva l'oggetto nel database
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.DoDelete">
            <summary>
            Elimina l'oggetto dal database
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.GetHashBaseString">
            <summary>
            Ritorna una stringa per calcolo di hash
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.LoadPropertyFromDB(Business.Data.Objects.Core.Schema.Definition.PropertySimple)">
            <summary>
            Esegue caricamento singola property da DB
            </summary>
            <param name="prop"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.ExecQueryAndLoadObj(Business.Data.Objects.Database.IDataBase)">
            <summary>
            Esegue la query impostata ed carica dati su oggetto
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.LoadByFilter(Business.Data.Objects.Core.IFilter,Business.Data.Objects.Core.OrderBy)">
            <summary>
            Carica oggetto a partire da un filtro custom
            </summary>
            <param name="filter"></param>
            <param name="order"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.LoadByCustomWhere(System.String,Business.Data.Objects.Core.OrderBy)">
            <summary>
            Carica oggetto a partire da uno statement where custom
            </summary>
            <param name="filter"></param>
            <param name="order"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.LoadBySchemaKey(Business.Data.Objects.Core.Schema.Definition.Key,System.Object[])">
            <summary>
            Carica oggetto da chiave 
            </summary>
            <param name="keyIn"></param>
            <param name="values"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.FillObjectFromReader(System.Data.IDataReader,System.Boolean)">
            <summary>
            Carica le proprietà standard dell'oggetto
            </summary>
            <param name="dr"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.GetPropertyDefinition(System.Int32)">
            <summary>
            Carica definizione di proprietà con controllo
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.validateProperties(System.Boolean)">
            <summary>
            Base properties validation (based on class definition)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.performDbInsert">
            <summary>
            Esegue la insert sul DB
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.performDbUpdate">
            <summary>
            Esegue update sul DB
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.performDbDelete">
            <summary>
            Perform database delete
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DataObjectBase.Equals(System.Object)">
            <summary>
            Confronto tra due oggetti (viene confrontata Primary Key)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.DbPrefixDictionary">
            <summary>
            Dizionario specifico per i nomi di db. I metodi add e this.set normalizzano il nome db aggiungendo il carattere . terminale
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.DbPrefixDictionary.Item(System.String)">
            <summary>
            Get or set il dbname in base alla key specificata
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DbPrefixDictionary.Add(System.String,System.String)">
            <summary>
            Aggiunge Dbname identificato da chiave
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.DbPrefixDictionary.dbNameNormalize(System.String)">
            <summary>
            Normalizza il nome DB
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.IBusinessObjFactory">
            <summary>
            Interfaccia per la definizione di factory personalizzati di BusinessObjects
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.IBusinessObjFactory.Create(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Crea business object a partire da un dal
            </summary>
            <param name="dalObj"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.InnerDataList">
            <summary>
            Lista interna di gestione datalist
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.InnerDataListItem">
            <summary>
            Inner list item 
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.Base.InnerDataListItem.PkValues">
            <summary>
            Values of PK
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.Base.InnerDataListItem.PkHashCode">
            <summary>
            Eventual Hash of PK values
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.Base.InnerDataListItem.ExtraData">
            <summary>
            Other query values 
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.Base.InnerDataListItem.Object">
            <summary>
            Loaded inner object
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Base.SlotAwareObject">
            <summary>
            Classe base per oggetti dipendenti da slot
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Base.SlotAwareObject.Slot">
            <summary>
            Slot associato all'oggetto (interno)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.SetSlot(Business.Data.Objects.Core.BusinessSlot)">
            <summary>
            Imposta lo slot sull'oggetto
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.GetSlot">
            <summary>
            Slot associato all'oggetto
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.extraDataTouch">
            <summary>
            Se non presente extra data viene creato
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataExist(System.String)">
            <summary>
            Verifica se presenti dati aggiuntivi su oggetto (singolo o lista) individuati per chiave
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataGet(System.String,System.Object)">
            <summary>
            Ritorna dati aggiuntivi memorizzati a livello di oggetto (singolo o lista)
            individuati per chiave. Se non trovata la chiave ritorna il valore defult fornito
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataSet(System.String,System.Object)">
            <summary>
            Imposta dati aggiuntivi su oggetto (singolo o lista) individuati per chiave
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataRemove(System.String)">
            <summary>
            Rimuove dati aggiuntivi su oggetto (singolo o lista) individuati per chiave
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataCount">
            <summary>
            Ritorna il numero di elementi Extra
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataClear">
            <summary>
            Elimina tutti i dati extra
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataGetKeys">
            <summary>
            Ritorna tutte le chiavi registrate per l'oggetto
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataKeys">
            <summary>
            Ritorna collection di key extra data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.ExtraDataValues">
            <summary>
            Ritorna collection di valori extra data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Base.SlotAwareObject.SwitchToSlot(Business.Data.Objects.Core.BusinessSlot)">
            <summary>
            Passa oggetto su Slot Fornito
            </summary>
            <param name="slotIn"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessObject`1">
            <summary>
            Classe astratta per la definizione dei metodi di
            business per una generica classe
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessObject`1.DataObj">
            <summary>
            Oggetto dati associato
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessObject`1.#ctor(`0)">
            <summary>
            Costruttore base
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessObject`1.LazyLoadFunc">
            <summary>
            Funzione di caricamento oggetto lazy
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessObject`1.GetLazy``1(System.String,Business.Data.Objects.Core.BusinessObject{`0}.LazyLoadFunc)">
            <summary>
            Ritorna oggetto precedentemente caricato oppure lo carica tramite la funzione in input e lo memorizza per accessi successivi
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="uniqueKey"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessObjFactory`1">
            <summary>
            Classe base per oggetti Business
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessObjFactory`1.BizType">
            <summary>
            Espone il tipo base del factory
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessSlot">
            <summary>
            Oggetto base che gestisce la vita degli altri oggetti di business
            consentendo in primo luogo l'accesso ai dati
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessSlot.LogDebugHandler">
            <summary>
            Delegato per la cattura del debug log
            </summary>
            <param name="slot"></param>
            <param name="level"></param>
            <param name="message"></param>
        </member>
        <member name="E:Business.Data.Objects.Core.BusinessSlot.OnLogDebugSent">
            <summary>
            Evento scatenato dalle chiamate al metodo LogDebug() dello slot
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessSlot.DbConnectionRequestHandler">
            <summary>
            Funzione che ritorna una connessione db a partire da un nome
            </summary>
            <param name="dbName"></param>
            <returns></returns>
        </member>
        <member name="E:Business.Data.Objects.Core.BusinessSlot.OnDbConnectionRequired">
            <summary>
            Evento scatenato dalla richiesta di un db non presente all'interno dello slot
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessSlot.UserInfoRequestHandler">
            <summary>
            Delegato per ritornare il dato dell'utente da utilizzare con l'attributo "UserInfo"
            </summary>
            <returns></returns>
        </member>
        <member name="E:Business.Data.Objects.Core.BusinessSlot.OnUserInfoRequired">
            <summary>
            Evento da agganciare per specificare il dato dell'utente da salvare nel campo identificato dall'attributo "Username"
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.GetUserInfo">
            <summary>
            Ritorna le informazioni sull'utente (id o username o altro) dall'evento relativo o, se nullo, dal campo username dello slot
            </summary>
            <returns></returns>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.SlotId">
            <summary>
            ID Univoco Sessione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.StartDate">
            <summary>
            Data/Ora inizio della sessione corrente
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.ProtectionLevel">
            <summary>
            Livello di protezione applicato allo slot
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.Simulate">
            <summary>
            Se impostato disattiva procedure di manipolazione dati
            degli oggetti: Save (Insert, update), Delete.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.EventManagerEnabled">
            <summary>
            Attiva/Disattiva tracciamento eventi su oggetto (che vanno comunque registrati attraverso le opportune funzioni di Register)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.EventManager">
            <summary>
            Gestore eventi associati allo slot.
            Attenzione: se non impostato EventManagementEnabled=true l'oggetto risulta null
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.ChangeTrackingEnabled">
            <summary>
            Attiva/Disattiva verifica modifiche reali su proprieta' di oggetti
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.LiveTrackingEnabled">
            <summary>
            Indica se utilizzare il tracciamento degli oggetti: se un oggetto e' stato già caricato nella sessione di vita dello slot
            ad ogni nuova richiesta dello stesso viene ritornata sempre la stessa istanza. Ciò implica che una modifica ad un oggetto
            è IMMEDIATAMENTE ATTIVA su tutti gli oggetti che referenziano l'oggetto con la medesima chiave
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.LiveTrackingSize">
            <summary>
            Ritorna la dimensione del LiveTracking (numero di entry attualmente tracciate in memoria).
            Attenzione: non è detto che questo sia il numero effettivo di oggetti in memoria in quanto i riferimenti
            possono venir eliminati in qualsiasi momento dal GC (una entry potrebbe essere in lista ma con un riferimento ad oggetto nullo).
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.LiveTrackingCurrentSize">
            <summary>
            Ritorna numero degli oggetti in memoria
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.Terminated">
            <summary>
            Indica che lo slot è stato terminato (Disposed())
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.DB">
            <summary>
            Istanza di database associata alla sessione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.UserName">
            <summary>
            Indica l'utente associato alla sessione corrente
            Solo ad uso applicativo.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.UserType">
            <summary>
            Indica il tipo di utente associato alla sessione.
            Ad esclusivo uso applicativo.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.IsAuthenticated">
            <summary>
            Indica se la sessione è stata esplicitamente Autenticata.
            Solo ad uso utente.
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.CachingEnabled">
            <summary>
            Indica o imposta l'utilizzo o meno del caching
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.MessageList">
            <summary>
            Lista Messaggi pubblica
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.SharedLog">
            <summary>
            Il log utilizzabile per default
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.DBCount">
            <summary>
            Indica il numero di istanze database definite
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.ListCacheTimeoutMinuti">
            <summary>
            Ottiene/Imposta i minuti di timeout da utilizzare nella cache delle liste. La modifica impatta solo i nuovi oggetti
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.BusinessSlot.EObjectEvent">
            <summary>
            Indica l'evento che si vuole gestire
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.BusinessSlot.EObjectEvent.Load">
            <summary>
            Caricamento
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.BusinessSlot.EObjectEvent.Insert">
            <summary>
            Inserimento istanza
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.BusinessSlot.EObjectEvent.Update">
            <summary>
            Aggiornamento istanza
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.BusinessSlot.EObjectEvent.Delete">
            <summary>
            Eliminazione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoopMT``2(``0,System.Int32,Business.Data.Objects.Core.BusinessSlot.WorkListSlice{``0})">
            <summary>
            Esegue un loop multithreading con attesa di completamento. Se si verificano errori all'interno dei thread lancia eccezione al completamento
            </summary>
            <typeparam name="TL"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="numThreads"></param>
            <param name="func"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyClear">
            <summary>
            Elimina tutte le proprieta'
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyRemove(System.String)">
            <summary>
            Elimina proprieta'
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertySet(System.String,System.Object)">
            <summary>
            Imposta proprieta'. Se gia' presente sostituisce il valore
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyExist(System.String)">
            <summary>
            Verifica esistenza proprieta'
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyGet(System.String)">
            <summary>
            Ritorna valore proprieta' con priorita' al settings. Se non presente ritorna eccezione
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyGet(System.String,System.Boolean)">
            <summary>
            Ritorna proprieta' impostandone la priorita' di ricerca
            </summary>
            <param name="key"></param>
            <param name="settingFirst"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyGetWithDefault(System.String,System.Object)">
            <summary>
            Ritorna valore di proprieta' e, se inesistente, il valore di default
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyGetT``1(System.String)">
            <summary>
            Ritorna valore proprieta' con priorita' al settings. Se non presente ritorna eccezione
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyGetT``1(System.String,System.Boolean)">
            <summary>
            Ritorna proprieta' impostandone la priorita' di ricerca
            </summary>
            <param name="key"></param>
            <param name="settingFirst"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyGetWithDefaultT``1(System.String,``0)">
            <summary>
            Ritorna valore di proprieta' e, se inesistente, il valore di default
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyCount">
            <summary>
            Ritorna numero di proprieta' definite + numero di chiavi ConfigurationManager.AppSettings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PropertyAllKeys">
            <summary>
            Ritorna tutte le chiavi di proprieta' + chiavi ConfigurationManager.AppSettings definite
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ResetListGlobal">
            <summary>
            Svuota cache globale delle liste
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ResetCacheGlobal">
            <summary>
            Pulisce il contenuto della cache globale
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.IsCacheable``1">
            <summary>
            Indica se un oggetto e' memorizzabile in una cache
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbGetNames">
            <summary>
            Ritorna elenco nomi database registrati
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbGet(Business.Data.Objects.Core.Schema.Definition.ClassSchema)">
            <summary>
            Ottiene istanza db associata allo schema
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbGet(System.String)">
            <summary>
            Ritorna il database identificato dal nome 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbGet``1">
            <summary>
            Ritorna istanza database specifica per il tipo di oggetto
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbAdd(System.String,Business.Data.Objects.Database.IDataBase)">
            <summary>
            Aggiunge db a lista
            </summary>
            <param name="name"></param>
            <param name="db"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbAdd(System.String,System.String,System.String)">
            <summary>
            Aggiunge allo slot un'altra istanza database identificata da un nome,
            di tipo specificato e con connection string fornita
            </summary>
            <param name="name"></param>
            <param name="dbType"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbRemove(System.String,System.Boolean)">
            <summary>
            Rimuove database da elenco specificando se eventualmente eseguire rollback di transazioni appese
            </summary>
            <param name="name"></param>
            <param name="rollbackUnCommited"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbGetStatsAll">
            <summary>
            Ritorna una statistica compelssiva di tutte le attività database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbBeginTransAll(System.Data.IsolationLevel)">
            <summary>
            Apre transazione su tutti i database collegati.
            Se fornito "Unspecified" viene utilizzato quello di default per ciascuna tipologia di db
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbBeginTransAll">
            <summary>
            Apre transazione su tutti i db utilizzando l'isolamento di default per ciascuno
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbCommitAll">
            <summary>
            Esegue il commit su tutti i database collegati
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbRollBackAll">
            <summary>
            Esegue il rollback su tutti i database collegati
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.BusinessSlot.DbPrefixKeys">
            <summary>
            Dizionario contenente i nomi database (identificati da una chiave case sensitive) che verranno utilizzati nelle calssi che lo necessitano
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbPrefixGetTableName(Business.Data.Objects.Core.Attributes.Table)">
            <summary>
            Risolve il nome della tabella con eventuale aggiunta della componente DB
            </summary>
            <param name="schema"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbPrefixGetTableName``1">
            <summary>
            Dato un dataobject (tipo) ritorna il nome completo di tabella risolto eventualmente della componente DB
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbPrefixGetColumn``1(System.String)">
            <summary>
            Data una classe ed un nome di proprieta' ritorna il nome del campo DB. 
            Utile quando differenti rispetto alla nomenclatura della classe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbPrefixGetColumn(System.Type,System.String)">
            <summary>
            Data una classe ed un nome di proprieta' ritorna il nome del campo DB. 
            Utile quando differenti rispetto alla nomenclatura della classe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DbPrefixGetTableName(System.String,System.String)">
            <summary>
            Ritorna il nome completo di tabella a partire da DbPrefixKey e nome tabella
            </summary>
            <param name="prefixKey"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LogDebug(Business.Data.Objects.Core.DebugLevel,System.String,System.Object[])">
            <summary>
            Scrive LogDebug. per utilizzarlo è necessario agganciare l'evento OnLogDebugSent
            </summary>
            <param name="level"></param>
            <param name="msgFmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LogDebug(System.String,System.Object[])">
            <summary>
            Scrive LogDebug con livello default User_1
            </summary>
            <param name="msgFmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LogDebugException(Business.Data.Objects.Core.DebugLevel,System.Exception)">
            <summary>
            Scrive LogDebugException
            </summary>
            <param name="level"></param>
            <param name="e"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LogDebugException(System.Exception)">
            <summary>
            Scrive LogDebugException con livello default Error_1
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.loadObjectComplete(Business.Data.Objects.Core.Base.DataObjectBase,System.Boolean,System.String)">
            <summary>
            Finalizza il caricamento. Se ritorna false significa che l'oggetto non e' stato caricato
            </summary>
            <param name="obj"></param>
            <param name="raiseNotFound"></param>
            <param name="raiseMessage"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjectInternalByCustomWhere(System.Type,System.Boolean,System.String,Business.Data.Objects.Core.OrderBy)">
            <summary>
            Carica da espressione linq. Se raiseNotFound=false e non trovato ritorna un nuovo oggetto
            </summary>
            <param name="origType"></param>
            <param name="raiseNotFound"></param>
            <param name="where"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjectInternalByFILTER(System.Type,System.Boolean,Business.Data.Objects.Core.IFilter,Business.Data.Objects.Core.OrderBy)">
            <summary>
            Carica oggetto a partire da un filtro fornito. Se non trovato lancia eccesione se raiseNotFound è true oppure ritorna oggetto nuovo
            </summary>
            <param name="origType"></param>
            <param name="raiseNotFound"></param>
            <param name="filter"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjectInternalByKEY(System.String,System.Type,System.Boolean,System.Object[])">
            <summary>
            Routine di caricamento oggetto con 
            </summary>
            <param name="keyName"></param>
            <param name="origType"></param>
            <param name="raiseNotFound"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjOrNewInternalByKEY(System.String,System.Type,System.Object[])">
            <summary>
            Carica oggetto da chiave definita e se non esiste ritorna nuovo oggetto precaricato con i valori utilizzando il type specificato
            </summary>
            <param name="keyName"></param>
            <param name="origType"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjByPK``1(System.Object[])">
            <summary>
            Carica Oggetto Da Chiave Primaria
            Se oggetto non trovato viene lanciata eccezione
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjByKEY``1(System.String,System.Object[])">
            <summary>
            Carica oggetto da chiave secondaria
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjNullByPK``1(System.Object[])">
            <summary>
            Carica oggetto da PK e se non esiste ritorna null
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjNullByKEY``1(System.String,System.Object[])">
            <summary>
            Carica oggetto da chiave definita
            </summary>
            <param name="keyName">
            Nome della chiave definita sull'oggetto
            </param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjOrNewByPK``1(System.Object[])">
            <summary>
            Carica oggetto da PK e se non esiste ritorna nuovo oggetto precaricato con i valori
            richiesti
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjOrNewByKEY``1(System.String,System.Object[])">
            <summary>
            Carica oggetto da chiave definita e se non esiste ritorna nuovo oggetto precaricato con i valori
            richiesti
            </summary>
            <param name="keyName">
            Nome della chiave definita sull'oggetto
            </param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjByFILTER``1(Business.Data.Objects.Core.IFilter,Business.Data.Objects.Core.OrderBy)">
            <summary>
            Carica oggetto da filtro custom.
            Se non trovato lancia eccezione.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjNullByFILTER``1(Business.Data.Objects.Core.IFilter,Business.Data.Objects.Core.OrderBy)">
            <summary>
            Carica oggetto da filtro custom.
            Se non trovato ritorn NULL.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LoadObjOrNewByFILTER``1(Business.Data.Objects.Core.IFilter,Business.Data.Objects.Core.OrderBy)">
            <summary>
            Carica oggetto da filtro custom e se non esiste ritorna un nuovo oggetto vuoto
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filter"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.CreateObjectByType(System.Type)">
            <summary>
            Crea nuova istanza di oggetto non tipizzato
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.CreateObject``1">
            <summary>
            Crea nuova istanza di oggetto
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.CreateList``1">
            <summary>
            Crea una lista non paginata
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.CreatePagedList``1(System.Int32,System.Int32)">
            <summary>
            Crea una lista paginata
            </summary>
            <param name="page"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.SaveObject``1(``0)">
            <summary>
            Salva l'oggetto in input utilizzando questa sessione
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DeleteObject``1(``0,System.Boolean)">
            <summary>
            Elimina oggetto utilizzando questa sessione
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.SaveAll``1(``0)">
            <summary>
            Salva tutti gli oggetti della lista
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TL"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DeleteAll``1(``0,System.Boolean)">
            <summary>
            Cancella tutti gli elementi di una lista. Al termine la lista risulta ancora piena
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ToBizList``2(System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Ritorna una lista di businessobjects a partire da qualsiasi enumerabile di dataobject
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.CloneObject``1(``0)">
            <summary>
            Ritorna copia esatta dell'oggetto su nuova istanza
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.CloneObjectForNew``1(``0)">
            <summary>
            Ritorna copia dell'oggetto su nuova istanza azzerando la chiave primaria
            e impostando lo stato a nuovo
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.RefreshObject``1(``0,System.Boolean)">
            <summary>
            Esegue nuovamente il caricamento dalla sorgente (cache, db)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ExtraDataExist(Business.Data.Objects.Core.Base.SlotAwareObject,System.String)">
            <summary>
            Verifica se presenti dati aggiuntivi su oggetto (singolo o lista) individuati per chiave
            </summary>
            <param name="obj"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ExtraDataGet``1(Business.Data.Objects.Core.Base.SlotAwareObject,System.String,``0)">
            <summary>
            Ritorna dati aggiuntivi memorizzati a livello di oggetto (singolo o lista)
            individuati per chiave. Se non trovata la chiave ritorna il valore defult fornito
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ExtraDataSet``1(Business.Data.Objects.Core.Base.SlotAwareObject,System.String,``0)">
            <summary>
            Imposta dati aggiuntivi su oggetto (singolo o lista) individuati per chiave
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ExtraDataRemove(Business.Data.Objects.Core.Base.SlotAwareObject,System.String)">
            <summary>
            Rimuove dati aggiuntivi su oggetto (singolo o lista) individuati per chiave
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="key"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ExtraDataClear(Business.Data.Objects.Core.Base.SlotAwareObject)">
            <summary>
            Elimina tutti i dati extra
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ExtraDataGetKeys(Business.Data.Objects.Core.Base.SlotAwareObject)">
            <summary>
            Ritorna tutte le chiavi registrate per l'oggetto
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ExtraDataCount(Business.Data.Objects.Core.Base.SlotAwareObject)">
            <summary>
            Ritorna tutte le chiavi registrate per l'oggetto
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.DebugObjectDump``1(``0)">
            <summary>
            Esegue il dump stampabile di un oggetto
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.GetCurrentElapsed">
            <summary>
            Ritorna misurazione di quanto trascorso dalla creazione dello slot
            Utile per calcolare performance/altro
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PrintInfo">
            <summary>
            Stampa Informazioni Relative
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PrintCacheDebug">
            <summary>
            Ritorna testo con dump della cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.PrintLiveTrackingDebug">
            <summary>
            Ritorna testo con dump del live tracking
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LiveTrackingClear">
            <summary>
            Svuota la cache interna di tracking
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.LiveTrackingDeadScan(System.Boolean)">
            <summary>
            Se attivo object live tracking allora rimuove tutte le entry i cui oggetti risultano morti (gc-ed)
            </summary>
            <param name="issync"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.BizNewWithCreateObj``1">
            <summary>
            Crea un business object con un oggetto dal vuoto
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.BizNewWithLoadByPK``1(System.Object[])">
            <summary>
            Crea una biz con LoadByKEY
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.BizNewWithLoadByKEY``1(System.String,System.Object[])">
            <summary>
            Crea una biz con LoadByKEY
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.BizNewWithLoadOrNewByPK``1(System.Object[])">
            <summary>
            Crea una biz con LoadOrNewByPK
            </summary>
            <typeparam name="T"></typeparam>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.BizNewWithLoadOrNewByKEY``1(System.String,System.Object[])">
            <summary>
            Crea una biz con LoadOrNewByKEY
            </summary>
            <typeparam name="T"></typeparam>
            <param name="keyName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.ToString">
            <summary>
            Ritorna rappresentazione in stringa
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.Clone">
            <summary>
            Dato uno slot crea una copia conforme:
            Viene generato un nuovo id ed una nuova connessione db
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.#ctor(Business.Data.Objects.Database.IDataBase)">
            <summary>
            Crea istanza a partire da una classe database
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Crea istanza a partire da oggetti ADO
            </summary>
            <param name="conn"></param>
            <param name="tran"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.#ctor(System.String,System.String)">
            <summary>
            Crea nuovo slot fornendo il Tipo Database e la connectionstring
            </summary>
            <param name="dbType">
            Tipo Database utilizzabile: MSSQLDataBase, MYSQLDataBase,
            FBDataBase, ACCESSDataBase, SQLITEDataBase
            </param>
            <param name="connectionString">
            La stringa di connessione da utilizzare
            </param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.InitSlot(Business.Data.Objects.Database.IDataBase)">
            <summary>
            Inizializza dati vari slot
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.CacheSetAny(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            dato un oggetto prova ad inserirlo nelle varie cache previste
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.IsCacheable(Business.Data.Objects.Core.Schema.Definition.ClassSchema)">
            <summary>
            Indica se possibile inserire/leggere un oggetto in cache
            </summary>
            <param name="sc"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.IsCacheable(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            indica se oggetto inseribile in cache
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.cacheGetPipeline(System.String,Business.Data.Objects.Core.Schema.Definition.ClassSchema)">
            <summary>
            Ottiene schema da cache in cascata
            </summary>
            <param name="uniqueKey"></param>
            <param name="sc"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.cacheSetPipeline(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Se possibile salva oggetto in cache
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.liveTrackingActivation(System.Boolean)">
            <summary>
            Attiva o disattiva tracking
            </summary>
            <param name="active"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.liveTrackingSet(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Imposta oggetto nello store del tracking
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.liveTrackingRemove(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Rimuove oggetto dallo store del tracking
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.liveTrackingGet(System.String)">
            <summary>
            Ritorna oggetto dallo store del tracking
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.#cctor">
            <summary>
            Costruttore statico che esegue configurazione base
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.StaticConfigure(Business.Data.Objects.Core.SlotConfig)">
            <summary>
            Consente di impostare la configurazione statica base dello slot.
            E' ammessa una sola chiamata per ciclo di vita dell'applicazione.
            </summary>
            <param name="conf"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.InitConfigure(Business.Data.Objects.Core.SlotConfig)">
            <summary>
            Configura uno slot a partire da un'oggetto configurazione
            </summary>
            <param name="conf"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.BusinessSlot.Dispose">
            <summary>
            Libera risorse associate
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.DataList`2">
            <summary>
            Classe astratta da utilizzare per gestione Liste
            </summary>
            <typeparam name="TL"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Business.Data.Objects.Core.DataList`2.Item(System.Int32)">
            <summary>
            Ritorna oggetto alla posizione specificata
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.#ctor">
            <summary>
            Costruttore
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.CacheResult">
            <summary>
            La ricerca effettuata dopo questa istruzione verifica la presenza di una eventuale risultato precedente
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.LoadFullObjects">
            <summary>
            Indica che gli oggetti vanno precaricati attraverso il risultato della query di lista
            Attenzione! Al momento integrato direttamente solo sulle SearcBDO. Le query custom non possono eseguire il LoadFullObjects
            in quanto andrebbero manipolate senza garanzia del risultato
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.IncludeDeleted">
            <summary>
            Istruisce la query successiva ad includere gli oggetti eliminati logicamente
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.OrderByReset">
            <summary>
            Resetta campi orderBy
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.OrderBy(System.String,Business.Data.Objects.Core.OrderVersus)">
            <summary>
            Imposta il campo di sort e la direzione di sort
            Da utilizzare subito prima dell'esecuzione della ricerca.
            </summary>
            <param name="sortField"></param>
            <param name="versus"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.OrderBy(System.String)">
            <summary>
            Order By Field ascending
            </summary>
            <param name="sortField"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.OrderBy(Business.Data.Objects.Core.OrderBy)">
            <summary>
            Imposta Order By passando direttamente tutto l'oggetto orderby
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.SearchAllObjects">
            <summary>
            Esegue ricerca semplice di tutti gli oggetti
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.SearchByColumn(System.String,Business.Data.Objects.Core.EOperator,System.Object)">
            <summary>
            Esegue ricerca oggetti a partire da un valore di colonna applicando l'operatore impostato
            </summary>
            <param name="columnName"></param>
            <param name="op">Se [IsNull, IsNotNull] il valore non viene considerato</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.SearchByColumn(Business.Data.Objects.Core.IFilter)">
            <summary>
            Ricerca attraverso un filtro di colonna
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.SearchByLinq(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}})">
            <summary>
            Ricerca attraverso un'espressione linq.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.OrderByLinq``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Esegue ordinamento tramite selezione del campo. Modalita' ASC
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.OrderByLinqDesc``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
            <summary>
            Esegue ordinamento tramite selezione del campo. Modalita' DESC
            </summary>
            <typeparam name="TKey"></typeparam>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.ToPagedList(System.Int32,System.Int32)">
            <summary>
            Data una lista ritorna una sottolista paginata
            </summary>
            <param name="page"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.ToBizObjectList``1">
            <summary>
            Ritorna una lista di business objects
            </summary>
            <typeparam name="TB"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.Dispose">
            <summary>
             Crea una lista paginata
            </summary>
            <param name="slotIn"></param>
            <param name="page"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Aggiunge un set di elementi alla lista
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.Add(`1)">
            <summary>
            Aggiunge un elemento alla lista
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.AddOrUpdate(`1)">
            <summary>
            Aggiunge un elemento alla lista se non gia' presente
            </summary>
            <param name="item"></param>
            <returns> true se ha effettuato l'aggiunta, false se l'aggiornamento </returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.Contains(`1)">
            <summary>
            Verifica se la lista contiene l'elemento fornito (by PK)
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copia gli elementi su array
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.RemoveRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            rimuove un set di elementi alla lista
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.Remove(`1)">
            <summary>
            Rimuove oggetto
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.GetExtraValue(`1,System.String)">
            <summary>
            Ritorna un valore accessorio ripreso dalla query di caricamento lista.
            Utile per ricerche che ritornano dati aggiuntivi rispetto agli oggetti stessi
            </summary>
            <param name="item"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.IndexOf(`1)">
            <summary>
            Ricerca Indice Oggetto
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.Insert(System.Int32,`1)">
            <summary>
            Inserisce elemento nella posizione indicata
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.DataList`2.RemoveAt(System.Int32)">
            <summary>
            Rimuove elemento alla posizione indicata
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.DataObject`1">
            <summary>
            Classe da cui ereditare tutti gli oggetti di business con accesso a database
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Business.Data.Objects.Core.DataObject`1.EqualsDeep(`0)">
            <summary>
            Verifica se due oggetti sono uguali in tutte le proprietà mappate su DB
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataObject`1.DiffSource">
            <summary>
            Ritorna l'elenco di modifiche tra la versione corrente (gia' salvata)
            ed il corrispondente oggetto caricato dal sorgente (cache, database)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataObject`1.Diff(`0)">
            <summary>
            Dati due oggetti ritorna elenco differenze. Item1 e' il nome della prorieta, item2 il valore dell'oggetto origine, item3 dell'oggetto confrontato
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataObject`1.ToList``1">
            <summary>
            Ritorna una lista contenente l'elemento selezionato
            </summary>
            <typeparam name="TL"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.DataObject`1.ToBizObject``1">
            <summary>
            Dato un DataObject ritorna il corrispondente business object
            </summary>
            <typeparam name="TL"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.DataUtil">
            <summary>
            Classe astratta per la definizione dei metodi di
            business per una generica classe
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.DataUtil.#ctor(Business.Data.Objects.Core.BusinessSlot)">
            <summary>
            Costruttore base
            </summary>
            <param name="slotIn"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.DebugLevel">
            <summary>
            Indica il livello di debug dell'informazione trasmessa
            per convenzione i livelli più bassi indicano informazioni più di basso livello
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.User_1">
            <summary>
            Debug di dettagli utente 1
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.User_2">
            <summary>
            Debug di dettagli utente 2
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.User_3">
            <summary>
            Debug di dettagli utente 3
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.User_4">
            <summary>
            Debug di dettagli utente 4
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.User_5">
            <summary>
            Debug di dettagli utente 5
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Technical_1">
            <summary>
            Debug di dettagli tecnici 1
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Technical_2">
            <summary>
            Debug di dettagli tecnici 2
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Technical_3">
            <summary>
            Debug di dettagli tecnici 3
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Technical_4">
            <summary>
            Debug di dettagli tecnici 4
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Technical_5">
            <summary>
            Debug di dettagli tecnici 5
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Debug_1">
            <summary>
            Livello debug 1
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Debug_2">
            <summary>
            Livello debug 2
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Debug_3">
            <summary>
            Livello debug 3
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Info_1">
            <summary>
            Livello Info 1
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Info_2">
            <summary>
            Livello Info 2
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Info_3">
            <summary>
            Livello Info 3
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Warn_1">
            <summary>
            Livello Warning 1
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Warn_2">
            <summary>
            Livello Warning 2
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Warn_3">
            <summary>
            Livello Warning 3
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Error_1">
            <summary>
            Livello Error 1
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Error_2">
            <summary>
            Livello Error 2
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.DebugLevel.Error_3">
            <summary>
            Livello Error 3
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.EOperator">
            <summary>
            Indica il tipo di confronto da effettuare
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.Equal">
            <summary>
            Operatore =
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Business.Data.Objects.Core.EOperator.Differs" -->
        <member name="F:Business.Data.Objects.Core.EOperator.GreaterThan">
            <summary>
            Operatore >
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.GreaterEquals">
            <summary>
            Operatore >=
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.LessThan">
            <summary>
            Operatore &lt;
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.LessEquals">
            <summary>
            Operatore &lt;=
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.Like">
            <summary>
            Operatore LIKE
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.NotLike">
            <summary>
            Operatore NOT LIKE
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.IsNull">
            <summary>
            Operatore IS NULL
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.IsNotNull">
            <summary>
            Operatore IS NOT NULL
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.Between">
            <summary>
            Operatore BETWEEN
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.EOperator.In">
            <summary>
            Operatore IN
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Filter">
            <summary>
            Classe base da utilizzare per applicare/verificare filtri
            sia a livello di oggetto (Proprieta') che direttamente su query
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.#ctor(System.String,Business.Data.Objects.Core.EOperator,System.Object)">
            <summary>
            Costruttore base
            </summary>
            <param name="propName"></param>
            <param name="op"></param>
            <param name="propValue"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Eq(System.String,System.Object)">
            <summary>
            Crea un filtro EQUAL
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Lt(System.String,System.Object)">
            <summary>
            Crea un filtro LessThen
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Lte(System.String,System.Object)">
            <summary>
            Crea un filtro LessThenEqual
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Neq(System.String,System.Object)">
            <summary>
            Crea filtro differs
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Gt(System.String,System.Object)">
            <summary>
            Crea filtro Greater
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Gte(System.String,System.Object)">
            <summary>
            Crea filtro GreaterEQ
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Betw(System.String,System.Object,System.Object)">
            <summary>
            Crea filtro Between
            </summary>
            <param name="fieldName"></param>
            <param name="valueA"></param>
            <param name="valueB"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.IsNull(System.String)">
            <summary>
            Crea Filtro IsNull
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.NotNull(System.String)">
            <summary>
            Crea filtro IsNotNull
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.Like(System.String,System.Object)">
            <summary>
            Crea filtro Like
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.NotLike(System.String,System.Object)">
            <summary>
            Crea filtro NotLike
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Object)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Object,System.Object)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="value5"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="value5"></param>
            <param name="value6"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Array)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Filter.In(System.String,System.Collections.IEnumerable)">
            <summary>
            Crea filtro IN
            </summary>
            <param name="fieldName"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.FilterBase">
            <summary>
            Classe astratta di Filter
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.checkValueArray(System.String,System.Object[],System.Int32,System.Int32)">
            <summary>
            Controllo array
            </summary>
            <param name="filterName"></param>
            <param name="values"></param>
            <param name="minLen"></param>
            <param name="maxLen"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.checkValueNull(System.String,System.Object)">
            <summary>
            Verifica parametro NULL
            </summary>
            <param name="filterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.checkValueNotNull(System.String,System.Object)">
            <summary>
            Verifica valore
            </summary>
            <param name="filterName"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.#ctor(System.String,Business.Data.Objects.Core.EOperator,System.Object)">
            <summary>
            Base constructor
            </summary>
            <param name="name"></param>
            <param name="op"></param>
            <param name="value"></param>
        </member>
        <member name="P:Business.Data.Objects.Core.FilterBase.Name">
            <summary>
            Filter field name
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.FilterBase.Operator">
            <summary>
            Filter oPerator
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.FilterBase.Value">
            <summary>
            Valore del filtro
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.FieldRight">
            <summary>
            Indica che il nome di proprieta' deve essere impostato a dx dello statement.
            Non vale per tutti gli statement
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.FieldLeft">
            <summary>
            Indica che il nome di proprieta' deve essere impostato a sx dello statement (DEFAULT)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.And(Business.Data.Objects.Core.IFilter)">
            <summary>
            Filter AND
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.And(System.String,Business.Data.Objects.Core.EOperator,System.Object)">
            <summary>
            Filter AND con parametri espliciti
            </summary>
            <param name="name"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.Or(Business.Data.Objects.Core.IFilter)">
            <summary>
            Filter OR
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.Or(System.String,Business.Data.Objects.Core.EOperator,System.Object)">
            <summary>
            Filtro OR con parametri espliciti
            </summary>
            <param name="name"></param>
            <param name="op"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.PropertyTest(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Esegue test di confronto su oggetto
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.AppendFilterSql(Business.Data.Objects.Database.IDataBase,System.Text.StringBuilder,System.Int32)">
            <summary>
            Appende la clausola generata (SQL + Parametri)
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.FilterBase.appendFilterSqlInternal(Business.Data.Objects.Database.IDataBase,Business.Data.Objects.Core.BusinessSlot,Business.Data.Objects.Core.Schema.Definition.ClassSchema,System.Text.StringBuilder,System.Int32)">
            <summary>
            Appende la clausola generata (SQL + Parametri) con traduzione Proprieta -> Colonne
            </summary>
            <param name="db"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.ChainItem">
            <summary>
            Classe per la gestione della catena di filtri
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.IFilter">
            <summary>
            Interfaccia filtro
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.IFilter.Name">
            <summary>
            Filter Field Name
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.IFilter.Operator">
            <summary>
            Filter Inner operator
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.IFilter.Value">
            <summary>
            Valore RAW del filtro
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.IFilter.And(Business.Data.Objects.Core.IFilter)">
            <summary>
            Operatore AND
            </summary>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.IFilter.Or(Business.Data.Objects.Core.IFilter)">
            <summary>
            Operatore OR
            </summary>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.IFilter.PropertyTest(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Testa la proprieta' di un oggetto
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.IFilter.AppendFilterSql(Business.Data.Objects.Database.IDataBase,System.Text.StringBuilder,System.Int32)">
            <summary>
            Appende la traduzione SQL del filtro
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="paramIndex"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Business.Data.Objects.Core.IFilter.FieldRight" -->
        <member name="M:Business.Data.Objects.Core.IFilter.FieldLeft">
            <summary>
            Default.  Ripristina il default
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Objects.LinqQueryTranslator`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Objects.LinqQueryTranslator`1.execExpression(System.Linq.Expressions.Expression)">
            <summary>
            Esegue espressione e ritorna output
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Objects.LinqQueryTranslator`1.runExpression(System.Linq.Expressions.Expression)">
            <summary>
            Compila ed esegue uno statement
            </summary>
            <param name="m"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.OrderVersus">
            <summary>
            Definizione verso ordinamento
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.OrderBy">
            <summary>
            Classe per la gestione dell'ordinamento
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.OrderBy.OrderByItem">
            <summary>
            Classe interna di gestione orderBy
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.OrderBy.#ctor">
            <summary>
            Costruttore vuoto
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.OrderBy.#ctor(System.String,Business.Data.Objects.Core.OrderVersus)">
            <summary>
            Costruttore standard
            </summary>
            <param name="field"></param>
            <param name="versus"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.OrderBy.#ctor(System.String)">
            <summary>
            Crea orderby con verso default ascendente
            </summary>
            <param name="field"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.OrderBy.Add(System.String,Business.Data.Objects.Core.OrderVersus)">
            <summary>
            Aggiunge ulteriore clausola
            </summary>
            <param name="field"></param>
            <param name="versus"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.OrderBy.Add(System.String)">
            <summary>
            Aggiunge clausola con verso default Ascendente
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.OrderBy.ToString">
            <summary>
            Ritorna lo statement di order by completo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.OrderBy.Clear">
            <summary>
            Svuota clausola
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.PropertyManager">
            <summary>
            Classe per la gestione di proprieta'
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.PropertyIdentifier">
            <summary>
            Classe che identifica una Chiave di proprieta'
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.SlotConfig">
            <summary>
            Impostazioni Businessslot - Default da .config
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.LogBaseDirectory">
            <summary>
            Directory base per il logging
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.LogDatabaseActivity">
            <summary>
            Indica se attivo il logging delle operazioni database
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.LogDatabaseOnlyErrors">
            <summary>
            Indica se per il log db vanno loggati solo gli errori
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.CacheGlobalSize">
            <summary>
            Dimensione cache GLOBAL
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.ObjectValidationUseMessageList">
            <summary>
            Indica se i messaggi di validazione devono essere singolarmente immessi nella lista messaggi dello slot
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.XmlDefaultDateFormat">
            <summary>
            Indica il tipo di formattazione XML per le date
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.XmlDefaultDecimalFormat">
            <summary>
            Indica il tipo di formattazione XML dei decimal
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.LiveTrackingEnabled">
            <summary>
            Indica se attivo il live tracking
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.ChangeTrackingEnabled">
            <summary>
            Indica se attivo il change tracking
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.EventManagerEnabled">
            <summary>
            Indica se attivo l'event manager
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.CachingEnabled">
            <summary>
            Indica se attivo il caching (globale)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.SlotConfig.SimulateEnabled">
            <summary>
            Indica se attiva la modalita' simulazione (no write)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.SlotConfig.Clone">
            <summary>
            Crea una versione clonata della configurazione
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache">
            <summary>
            Classe per la gestione sicura dei caricamenti delle classi proxy e della loro gestione
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.Instance">
            <summary>
            Singleton main instance
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.ProxyAssemblyDaoDiz">
            <summary>
            Dizionario per la gestione dei proxy DAO
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.ProxyAssemblyDao">
            <summary>
            Classe per la gestione interna dei lookup DAO
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.ProxyAssemblyBizDiz">
            <summary>
            Dizionario per la gestione dei proxy BIZ
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.ProxyAssemblyBiz">
            <summary>
            Classe per la gestione interna dei lookup BIZ
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.NewObjeRefId">
            <summary>
            Ritorna un nuovo object reeference Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.Domain_Proxy_Resolver(System.Object,System.ResolveEventArgs)">
            <summary>
            Risoluzione assembly
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.GetDaoEntry(System.Type)">
            <summary>
            Get Entry
            </summary>
            <param name="entryType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.CreateDaoObj(System.Type)">
            <summary>
            Crea oggetto senza dataschema
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.CreateDaoObj(System.Type,System.Boolean)">
            <summary>
            Crea un oggetto specificando se valorizzare o meno il dataschema
            </summary>
            <param name="type"></param>
            <param name="withData"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.CreateDaoNoSchemaObj(System.Type)">
            <summary>
            Crea oggetto del tipo definito senza schema (es. tipo lista)
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.GetClassSchema(System.Type)">
            <summary>
            Ritorna schema associato a tipo
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.CreateBizObj(System.Type,Business.Data.Objects.Core.BusinessSlot,System.Boolean,System.String,System.Object[])">
            <summary>
            Crea istanza di BusinessObject utilizzando un costruttore dinamico
            </summary>
            <param name="tBiz"></param>
            <param name="slot"></param>
            <param name="keyName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.CreateBizObj(Business.Data.Objects.Core.ObjFactory.ProxyEntryBiz,Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Istanzia Biz object da una entry
            </summary>
            <param name="entry"></param>
            <param name="dalObj"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyEntryBiz">
            <summary>
            Classe interna per la gestione dei costruttori degli oggetti business
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyEntryBiz.FastCreateBizObj">
            <summary>
            Definizione del delegato per la creazione del business object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyEntryBiz.TypeKey">
            <summary>
            Chiave univoca del tipo
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyEntryBiz.DalType">
            <summary>
            Tipo di riferimento del DAL
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyEntryBiz.Create">
            <summary>
            Metodo
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyEntryBiz.Factory">
            <summary>
            Factory da utilizzare
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyEntryBizDic">
            <summary>
            Identifica un dizionario di ProxyEntryBiz
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyEntryDAO">
            <summary>
            Identifica una entry con tutte le informazioni necessarie per
            la gestione del nuovo tipo
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyEntryDAO.FastConstructor">
            <summary>
            Definizione del delegato costruttore
            </summary>
            <returns></returns>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyEntryDAO.ProxyType">
            <summary>
            Il nuovo tipo generato
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyEntryDAO.ClassSchema">
            <summary>
            Lo schema associato che descrive la mappatura
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.ObjFactory.ProxyEntryDAO.Create">
            <summary>
            Il costruttore da chiamare per creare un istanza
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyEntryDaoDic">
            <summary>
            Identifica un dizionario di TypeEntry
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder">
            <summary>
            Classe statica che crea le classi dinamiche costruite a partire da quelle dichiarate
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.DynAssemblyProxy">
            <summary>
            Work class
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.initProxyAssembly(System.Reflection.Assembly)">
            <summary>
            Inizializza l'assembly dinamico che contiene gli oggetti BDO
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.BuildDaoProxyFromAssembly(Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.ProxyAssemblyDao)">
            <summary>
            Crea i tipi modificati per l'assembly specificato
            </summary>
            <param name="outProxy"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.createFastConstructor(System.Type,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Crea un delegato (puntatore a funzione) per il costruttore dell'oggetto
            </summary>
            <param name="aType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.readClassSchemaWithSQL(System.Type,System.Int64,System.Reflection.PropertyInfo[])">
            <summary>
            Legge il tipo e ritorna lo schema pronto
            </summary>
            <param name="originalType"></param>
            <param name="InternalID"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.fillKeyAttribute(Business.Data.Objects.Core.Schema.Definition.ClassSchema,Business.Data.Objects.Core.Schema.Definition.Property,Business.Data.Objects.Core.Attributes.SearchKey)">
            <summary>
            Gestione chiavi
            </summary>
            <param name="oSchema"></param>
            <param name="oProp"></param>
            <param name="oAttrKey"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.BuildBizProxyFromAssembly(Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.ProxyAssemblyBiz)">
            <summary>
            Ritorna proxy create per business object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.ObjFactory.ProxyTypeBuilder.buildBizProxyEntry(System.Type,Business.Data.Objects.Core.ObjFactory.ProxyAssemblyCache.ProxyAssemblyBiz)">
            <summary>
            Ritorna proxy create per business object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.ObjectHelper">
            <summary>
            Classe appoggio con metodi utili agli oggetti
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.OperatorToString(Business.Data.Objects.Core.EOperator)">
            <summary>
            Ritorna stringa con stringa operatore
            </summary>
            <param name="op"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.ObjectEnumerableToString(System.Collections.IEnumerable)">
            <summary>
            Dato un array ritorna una rappresentazione in stringa tipo v1, v2
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.ObjectArrayToStringRecursive(System.Array)">
            <summary>
            Versione che va in ricorsione in presenza di sotto array
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.GetObjectHashString(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Crea un codice hash in formato stringa a partire da oggetto DAL
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.GetObjectHashString(Business.Data.Objects.Core.BusinessSlot,Business.Data.Objects.Core.Schema.Definition.ClassSchema,System.Object[])">
            <summary>
            Crea un codice hash in formato stringa leggibile
            </summary>
            <param name="slot"></param>
            <param name="schema"></param>
            <param name="pkvalues"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.JoinString(System.String,System.Collections.IEnumerable)">
            <summary>
            Concatena array di oggetti con separatore specificato
            </summary>
            <param name="sep"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.ToObjectArray(System.Array)">
            <summary>
            Crea un array di object a partire da un qualunque tipo di array
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ObjectHelper.ToObjectArray(System.Collections.IEnumerable)">
            <summary>
            Crea un array di object a partire da un qualunque tipo di enumerabile
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.PropertyHelper">
            <summary>
            Classe con funzioni di utilita' per Proprieta'
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.PropertyHelper.GetDefaultValue(System.Type)">
            <summary>
            Ritorna il valore base di un tipo.
            Attenzione!!! Vengono valorizzari solo i tipi numerici, string e DateTime.
            Tutto il resto torna null
            </summary>
            <param name="aType"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.ReferenceManager`2">
            <summary>
            Classe per il mantenimento di riferimenti di oggetti
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.ReferenceManager`2.InnerReference">
            <summary>
            Classe di contenimento del riferimento anche multiplo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Utils.ReferenceManager`2.IsActive">
            <summary>
            Indica se Tracking Attivo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Utils.ReferenceManager`2.Count">
            <summary>
            Ritorna numero elementi
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.#ctor(System.Int32)">
            <summary>
            Costruttore
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.Lock">
            <summary>
            Acquisisce il lock del reference manager per eseguire più operazioni in modalità atomica
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.Unlock">
            <summary>
            Libera il lock acquisito
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.Clear">
            <summary>
            Elimina tutti i riferimenti
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.Remove(`0)">
            <summary>
            Rimuove chiave singola
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.Set(`0,`1)">
            <summary>
            imposta oggetto con chiave
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.Get(`0)">
            <summary>
            Cerca oggetto
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.CleanDeadEntries(System.Boolean)">
            <summary>
            Esegue pulizia entry non più referenziate
            </summary>
            <param name="issync"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.PrintDebug">
            <summary>
            Ritorna dump "basico" con quanto presente nello Store
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.ReferenceManager`2.performCleanDeadEntries">
            <summary>
            esegue pulizia dei riferimenti non più attivi
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager">
            <summary>
            Gestore Eventi associato allo Slot
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.PostEventQ">
            <summary>
            Ritorna coda POST
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.PreEventQ">
            <summary>
            Coda di PRE
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.Clear">
            <summary>
            Elimina tutti gli eventi associati
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.RegisterPostEventHandlerForAny(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,Business.Data.Objects.Core.BusinessSlot.BDEventPostHandler)">
            <summary>
            Registra evento per qualunque tipo
            </summary>
            <param name="evt"></param>
            <param name="func"></param>
            <param name="inputData"></param>
            <param name="outputData"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.RegisterPostEventHandler``1(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,Business.Data.Objects.Core.BusinessSlot.BDEventPostHandler)">
            <summary>
            Registra evento per tipo su coda
            </summary>
            <typeparam name="T"></typeparam>
            <param name="evt"></param>
            <param name="func"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.RunPostEventHandlerQueue(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Esegue la coda di eventi. Attenzione! eccezioni non gestite interrompono la coda di esecuzione
            </summary>
            <typeparam name="T"></typeparam>
            <param name="evt"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.RegisterPreEventHandlerForAny(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,Business.Data.Objects.Core.BusinessSlot.BDEventPreHandler)">
            <summary>
            Registra evento per qualunque tipo
            </summary>
            <param name="evt"></param>
            <param name="func"></param>
            <param name="inputData"></param>
            <param name="outputData"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.RegisterPreEventHandler``1(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,Business.Data.Objects.Core.BusinessSlot.BDEventPreHandler)">
            <summary>
            Registra evento per tipo su coda
            </summary>
            <typeparam name="T"></typeparam>
            <param name="evt"></param>
            <param name="func"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventManager.RunPreEventHandlerQueue(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,Business.Data.Objects.Core.Base.DataObjectBase,System.Boolean@)">
            <summary>
            Esegue la coda di eventi. Attenzione! eccezioni non gestite interrompono la coda di esecuzione
            </summary>
            <typeparam name="T"></typeparam>
            <param name="evt"></param>
            <param name="value"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventSimpleQueuePRE">
            <summary>
            Coda per la gestione degli eventi PRE
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventSimpleQueuePRE.HandledType">
            <summary>
            Tipo Gestito
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventSimpleQueuePRE.Run(Business.Data.Objects.Core.Base.DataObjectBase,System.Boolean@)">
            <summary>
            Esegue tutti gli eventi
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventForTypeQueuePRE">
            <summary>
            Coda eventi  per tipo oggetto
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventForTypeQueuePRE.Add(System.Type,Business.Data.Objects.Core.BusinessSlot.BDEventPreHandler)">
            <summary>
            Aggiunge Item
            </summary>
            <param name="handler"></param>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventForTypeQueuePRE.Run(System.Type,Business.Data.Objects.Core.Base.DataObjectBase,System.Boolean@)">
            <summary>
            Esegue la coda
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventMainQueuePRE">
            <summary>
            Gestore coda per tipo evento
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventMainQueuePRE.Add(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,System.Type,Business.Data.Objects.Core.BusinessSlot.BDEventPreHandler)">
            <summary>
            Aggiunge Item
            </summary>
            <param name="handler"></param>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Business.Data.Objects.Core.Utils.BdoOnly.SlotEventMainQueuePRE.Run(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,System.Type,Business.Data.Objects.Core.Base.DataObjectBase,System.Boolean@)">
            <summary>
            Esegue coda per tipo evento
            </summary>
            <param name="evt"></param>
            <param name="value"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Business.Data.Objects.Core.Utils.JSONWriter" -->
        <member name="T:Business.Data.Objects.Common.Cache.CacheBase`2.CacheItem`2">
            <summary>
            Oggetto mantenuto in cache
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.Reset">
            <summary>
            Svuota completamente cache
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.AddAlternateKey(`0,`0)">
            <summary>
            Aggiunge un'altra chiave di riferimento per un oggetto gia' in cache
            </summary>
            <param name="keyBase"></param>
            <param name="keyNew"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.SetObject(`0,`1)">
            <summary>
            Aggiunge o Aggiorna oggetto in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.GetObject(`0)">
            <summary>
            Ritorna Oggetto
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.RemoveObject(`0)">
            <summary>
            Elimina oggetto da Cache se presente
            </summary>
            <param name="key"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.ContainsObject(`0)">
            <summary>
            Verifica se oggetto già presente in cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.Print">
            <summary>
            Ritorna stringa con rappresentazione dei dati contenuti
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheBase`2.FreeCacheSlots(System.Int32)">
            <summary>
            Se la cache ha raggiunto il massimo inizia ad eliminare elementi
            E' possibile specificare il numero di elementi da liberare
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheFIFO`2.SetObject(`0,`1)">
            <summary>
            Aggiunge o Aggiorna oggetto in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheFIFO`2.GetObject(`0)">
            <summary>
            Ritorna Oggetto
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Business.Data.Objects.Common.Cache.CacheSimple`2.CacheItem`2">
            <summary>
            Oggetto mantenuto in cache
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.Reset">
            <summary>
            Svuota completamente cache
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.AddAlternateKey(`0,`0)">
            <summary>
            Aggiunge un'altra chiave di riferimento per un oggetto gia' in cache
            </summary>
            <param name="keyBase"></param>
            <param name="keyNew"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.SetObject(`0,`1)">
            <summary>
            Aggiunge o Aggiorna oggetto in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.GetObject(`0)">
            <summary>
            Ritorna Oggetto
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.RemoveObject(`0)">
            <summary>
            Elimina oggetto da Cache se presente
            </summary>
            <param name="key"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.ContainsObject(`0)">
            <summary>
            Verifica se oggetto già presente in cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.Print">
            <summary>
            Ritorna stringa con rappresentazione dei dati contenuti
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheSimple`2.FreeCacheSlots(System.Int32)">
            <summary>
            Se la cache ha raggiunto il massimo inizia ad eliminare elementi
            E' possibile specificare il numero di elementi da liberare
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Business.Data.Objects.Common.Cache.CacheTimed`2.CacheItem`2">
            <summary>
            Oggetto mantenuto in cache
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.Reset">
            <summary>
            Svuota completamente cache
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.SetObject(`0,`1)">
            <summary>
            Aggiunge o Aggiorna oggetto in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.SetObject(`0,`1,System.TimeSpan)">
            <summary>
            Aggiunge o Aggiorna oggetto in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="span"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.GetObject(`0)">
            <summary>
            Ritorna Oggetto
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.RemoveObject(`0)">
            <summary>
            Elimina oggetto da Cache se presente
            </summary>
            <param name="key"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.ContainsObject(`0)">
            <summary>
            Verifica se oggetto già presente in cache
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.Print">
            <summary>
            Ritorna stringa con rappresentazione dei dati contenuti
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.CacheTimed`2.FreeByDate(System.DateTime)">
            <summary>
            Se la cache ha raggiunto il massimo inizia ad eliminare elementi
            E' possibile specificare il numero di elementi da liberare
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Business.Data.Objects.Common.Cache.ICache`2">
            <summary>
            Interfaccia per cache
            </summary>
            <typeparam name="TKey">Chiave di ricerca</typeparam>
            <typeparam name="T">Oggetto in cache</typeparam>
        </member>
        <member name="P:Business.Data.Objects.Common.Cache.ICache`2.CurrentSize">
            <summary>
            Dimensione attuale
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Cache.ICache`2.MaxSize">
            <summary>
            Dimensione massima
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.ICache`2.Reset">
            <summary>
            Svuota Cache
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.ICache`2.SetObject(`0,`1)">
            <summary>
            Aggiunge o Aggiorna oggetto in cache
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.ICache`2.AddAlternateKey(`0,`0)">
            <summary>
            Aggiunge una chiave alternativa ad un oggetto gia' in cache
            </summary>
            <param name="keyBase"></param>
            <param name="keyNew"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.ICache`2.ContainsObject(`0)">
            <summary>
            Verifica se oggetto è già presente in cache 
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.ICache`2.GetObject(`0)">
            <summary>
            Ritorna Oggetto
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.ICache`2.RemoveObject(`0)">
            <summary>
            Elimina oggetto da Cache se presente
            </summary>
            <param name="key"></param>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Cache.ICache`2.Print">
            <summary>
            Ritorna stringa con rappresentazione contenuto cache
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Constants">
            <summary>
            Costanti applicazione
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.Constants.STR_LIB_NAME">
            <summary>
            Nome libreria
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.Constants.STR_DB_DEFAULT">
            <summary>
            Stringa che identifica il contesto Database di default
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.Constants.ARR_DEFAULT_SPLIT_CHARS">
            <summary>
            Array di caratteri da utilizzare come split per stringhe (, e ;)
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.Constants.LOG_SEPARATOR">
            <summary>
            Separatore LOG
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.DataPager">
            <summary>
            Dati di paginazione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.DataPager.Position">
            <summary>
            Posizione (se lista paginata)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.DataPager.Offset">
            <summary>
            Numero max elementi
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.DataPager.Page">
            <summary>
            Pagina corrente
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.DataPager.TotRecords">
            <summary>
            Totale record
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.DataPager.TotPages">
            <summary>
            Totale pagine
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.DataPager.#ctor">
            <summary>
            Costruttore base
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.DataPager.ToXml">
            <summary>
            Ritorna rappresentazione Xml del pager
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.PageableResult`1">
            <summary>
            Classe che ritorna lista di risultati ed informazioni di paginazione associate
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.PageableResult`1.Result">
            <summary>
            Risultati
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.PageableResult`1.Pager">
            <summary>
            paginatore
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.EObjectSource">
            <summary>
            Enumerazione provenienza oggetto
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.EObjectSource.None">
            <summary>
            Oggetto nuovo
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.EObjectSource.Database">
            <summary>
            Caricato da database
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.EObjectSource.GlobalCache">
            <summary>
            Caricato da cache globale
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.EObjectSource.ExternalCache">
            <summary>
            Caricato da cache esterna
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.EObjectSource.DTO">
            <summary>
            Caricato da DTO
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.EObjectState">
            <summary>
            Enumerazione stati interni oggetto
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.EProtectionLevel">
            <summary>
            Definisce un livello di protezione testabile all'interno degli oggetti
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.ESaveResult">
            <summary>
            Definisce il livello di severità di un messaggio
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.ESaveResult.Unset">
            <summary>
            Risultato non noto
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.ESaveResult.SaveDone">
            <summary>
            Eseguito salvataggio
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.ESaveResult.UnChanged">
            <summary>
            Salvataggio non effettuato per oggetto non modificato
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.ESeverity">
            <summary>
            Definisce il livello di severità di un messaggio
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.ESeverity.Debug">
            <summary>
            Solo a scopo di debug
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.ESeverity.Info">
            <summary>
            Informazione
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.ESeverity.Warn">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Common.ESeverity.Error">
            <summary>
            Errore
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.BdoBaseException">
            <summary>
            Eccezione base BDO
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.BusinessSlotException">
            <summary>
            Eccezione da errore slot
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Exceptions.BusinessSlotException.#ctor(System.String,System.Object[])">
            <summary>
            Costruttore base
            </summary>
            <param name="className"></param>
            <param name="msgFormat"></param>
            <param name="args"></param>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.ConfigException">
            <summary>
            Eccezione da errore schema
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.FilterException">
            <summary>
            Eccezione da errore Filter
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.ObjectException">
            <summary>
            Eccezioni generate dall'oggetto
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.ObjectNotFoundException">
            <summary>
            Eccezioni generata se l'oggetto richiesto non è stato trovato
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.ObjectValidationException">
            <summary>
            Eccezioni generata se la validazione non è corretta
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Exceptions.TypeFactoryException">
            <summary>
            Eccezione da errore schema
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Logging.AsyncFileLogger">
            <summary>
            Classe per log su file di testo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.AsyncFileLogger.LogPath">
            <summary>
            Path completo file
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.AsyncFileLogger.WriteIntervalMsec">
            <summary>
            Millisecondi dopo i quali viene effettuata la scrittura
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.#ctor(System.String)">
            <summary>
            Crea logger su file fornito in modalità append e apre lo stream
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.StartLog">
            <summary>
            Avvio del log
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.StopLog">
            <summary>
            Ferma istanza log
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Scrive Messaggio Log
            </summary>
            <param name="msgIn"></param>
            <param name="args"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.LogException(System.Exception,System.Boolean)">
            <summary>
            Scrive informazioni su eccezione
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.appendLogData(System.String@)">
            <summary>
            Esegue l'accodamento del log 
            </summary>
            <param name="logmsg"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.saveLogData">
            <summary>
            Esegue salvataggio del log
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.AsyncFileLogger.asyncWriteRun">
            <summary>
            Esecuzione scrittura asincrona
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Logging.ConsoleLogger">
            <summary>
            Classe per log su file di testo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.ConsoleLogger.LogPath">
            <summary>
            Path completo file
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.ConsoleLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Scrive Messaggio Log
            </summary>
            <param name="msgIn"></param>
            <param name="args"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.ConsoleLogger.LogException(System.Exception,System.Boolean)">
            <summary>
            Scrive informazioni su eccezione
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.ConsoleLogger.StartLog">
            <summary>
            Avvia istanza log (la new lo esegue in automatico)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.ConsoleLogger.StopLog">
            <summary>
            Ferma istanza log
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Logging.CustomLogger">
            <summary>
            Classe per log su file di testo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.CustomLogger.LogPath">
            <summary>
            Path completo file
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.CustomLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Scrive Messaggio Log
            </summary>
            <param name="msgIn"></param>
            <param name="args"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.CustomLogger.LogException(System.Exception,System.Boolean)">
            <summary>
            Scrive informazioni su eccezione
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.CustomLogger.StartLog">
            <summary>
            Avvia istanza log (la new lo esegue in automatico)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.CustomLogger.StopLog">
            <summary>
            Ferma istanza log
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Logging.FileLogger">
            <summary>
            Classe per log su file di testo
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileLogger.#ctor(System.String)">
            <summary>
            Crea logger su file fornito in modalità append fornita e attivo specificato
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.FileLogger.LogPath">
            <summary>
            Path completo file
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Scrive Messaggio Log
            </summary>
            <param name="msgIn"></param>
            <param name="args"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileLogger.LogException(System.Exception,System.Boolean)">
            <summary>
            Scrive informazioni su eccezione
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileLogger.StartLog">
            <summary>
            Avvia istanza log (la new lo esegue in automatico)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileLogger.StopLog">
            <summary>
            Ferma istanza log
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Logging.FileStreamLogger">
            <summary>
            Classe per log su file di testo
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileStreamLogger.#ctor(System.String)">
            <summary>
            Crea logger su file fornito in modalità append e apre lo stream
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.FileStreamLogger.LogPath">
            <summary>
            Path completo file
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileStreamLogger.LogMessage(System.String,System.Object[])">
            <summary>
            Scrive Messaggio Log
            </summary>
            <param name="msgIn"></param>
            <param name="args"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileStreamLogger.LogException(System.Exception,System.Boolean)">
            <summary>
            Scrive informazioni su eccezione
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileStreamLogger.StartLog">
            <summary>
            Avvio del log
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileStreamLogger.StopLog">
            <summary>
            Ferma istanza log
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.FileStreamLogger.writeDataToFile(System.String)">
            <summary>
            Scrive su file
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Business.Data.Objects.Common.Logging.LoggerBase">
            <summary>
            Classe per log su file di testo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.LoggerBase.LogPath">
            <summary>
            Path completo log
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.LoggerBase.DateFormat">
            <summary>
            Formato data
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Logging.LoggerBase.WriteThreadId">
            <summary>
            Indica se scrivere nel log l'id del thread
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.LogMessage(System.String,System.Object[])">
            <summary>
            Log messaggio
            </summary>
            <param name="msgIn"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.LogException(System.Exception,System.Boolean)">
            <summary>
            Log eccezione
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.FormatLogTextMessage(System.String,System.Boolean,System.String,System.Object[])">
            <summary>
            Formatta una messaggio per scrittura log con la specifica del formato data e scrittura thread
            </summary>
            <param name="dateFromat"></param>
            <param name="writeThreadId"></param>
            <param name="msgIn"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.FormatLogTextMessage(System.String,System.Object[])">
            <summary>
            Formatta una messaggio per scrittura log con default data dd/MM/yyyy HH:mm:ss e scrittura thread
            </summary>
            <param name="msgIn"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.FormatLogTextException(System.String,System.Boolean,System.Exception,System.Boolean)">
            <summary>
            Ritorna testo log per eccezione con la specifica del formato data e scrittura thread
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
            <param name="dateFromat"></param>
            <param name="writeThreadId"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.FormatLogTextException(System.Exception,System.Boolean)">
            <summary>
            Ritorna testo log per eccezione con default data dd/MM/yyyy HH:mm:ss e scrittura thread
            </summary>
            <param name="e"></param>
            <param name="includeStack"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.BeginSafeWrite">
            <summary>
            Entra in modalita' scrittura esclusiva (thread-safe)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.EndSafeWrite">
            <summary>
            Esce dalla modalita' scrittura esclusiva (thread-safe)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.StartLog">
            <summary>
            Ferma flusso log
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.StopLog">
            <summary>
            Avvia/riavvia flusso log
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Logging.LoggerBase.Dispose">
            <summary>
            Libera risorse
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.BdoHash">
            <summary>
            Hashing globale BDO
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.Encryption.ICryptoAlgo">
            <summary>
            Interfaccia di Crypt/Decrypt
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.ICryptoAlgo.EncryptData(System.Byte[])">
            <summary>
            Ritorna dati criptati in formato stringa base64
            </summary>
            <param name="cleardata"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.ICryptoAlgo.EncryptString(System.String)">
            <summary>
            Ritorna stringa criptata in formato stringa base64
            </summary>
            <param name="cleardata"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.ICryptoAlgo.DecryptData(System.String)">
            <summary>
            Ritorna dati decriptati da testo codificato ed in base64
            </summary>
            <param name="encdata"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.ICryptoAlgo.DecryptString(System.String)">
            <summary>
            Ritorna stringa decriptata da testo codificato ed in base64
            </summary>
            <param name="encdata"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor">
            <summary>
            Classe per la codifica/decodifica di dati tramite RSA (chiavi) e AES (per i dati)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.createRijandelAES256">
            <summary>
            Crea istanza Rijandel (AES) con parametri base AES 256
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.createRijandelAES256(System.String)">
            <summary>
            Crea istanza Rijandel (AES) con parametri base AES 256 da chiave
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_AES_Encrypt(System.Security.Cryptography.RSA,System.Byte[],System.IO.Stream)">
            <summary>
            Cripta tramite chiave RSA un buffer su altro stream
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <param name="output"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_AES_Decrypt(System.Security.Cryptography.RSA,System.IO.Stream,System.IO.Stream)">
            <summary>
            Decripta tramite chiave RSA uno stream su altro stream
            </summary>
            <param name="key"></param>
            <param name="encInput"></param>
            <param name="output"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_Encrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Cripta tramite chiave RSA un buffer
            </summary>
            <param name="key"></param>
            <param name="clearData"></param>
            <param name="output"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_Decrypt(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Decripta tramite chiave RSA
            </summary>
            <param name="key"></param>
            <param name="encData"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_Encrypt_B64(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[])">
            <summary>
            Cripta buffer e ritorna un testo base 64
            </summary>
            <param name="key"></param>
            <param name="clearData"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_Decrypt_B64(System.Security.Cryptography.RSACryptoServiceProvider,System.String)">
            <summary>
            Decripta un testo codificato ed in base 64 e ritorna un buffer
            </summary>
            <param name="key"></param>
            <param name="encData64"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_Encrypt_B64_Text(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.Text.Encoding)">
            <summary>
            Cripta un testo (fornendo encoding) e ritorna testo codificato ed in base 64
            </summary>
            <param name="key"></param>
            <param name="clearData"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.RSA_Decrypt_B64_Text(System.Security.Cryptography.RSACryptoServiceProvider,System.String,System.Text.Encoding)">
            <summary>
            Decripta un testo codificato ed in base 64 e ritorna un testo nell'encoding specificato
            </summary>
            <param name="key"></param>
            <param name="encData64"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.AES_Encrypt(System.Byte[],System.String)">
            <summary>
            Cripta AES
            </summary>
            <param name="clearData"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.AES_Decrypt(System.Byte[],System.String)">
            <summary>
            Decripta tramite chiave RSA
            </summary>
            <param name="key"></param>
            <param name="encData"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.AES_Encrypt_B64_Text(System.String,System.String,System.Text.Encoding)">
            <summary>
            Cripta un testo (fornendo encoding) e ritorna testo codificato ed in base 64
            </summary>
            <param name="key"></param>
            <param name="clearData"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Encryption.RSA_AES_Encryptor.AES_Decrypt_B64_Text(System.String,System.String,System.Text.Encoding)">
            <summary>
            Decripta un testo codificato ed in base 64 e ritorna un testo nell'encoding specificato
            </summary>
            <param name="key"></param>
            <param name="encData64"></param>
            <param name="enc"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.Extensions">
            <summary>
            Extension method di utility per vari tipi
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Extensions.In``1(``0,``0[])">
            <summary>
            Operatore IN
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Extensions.Between``1(``0,``0,``0)">
            <summary>
            Operatore BEETWEEN
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="argLow"></param>
            <param name="argHigh"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Extensions.Between(System.IComparable,System.IComparable,System.IComparable)">
            <summary>
            Verifica se un valore è ricompreso in un intervallo, estremi inclusi
            </summary>
            <param name="obj"></param>
            <param name="argLow"></param>
            <param name="argHigh"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Extensions.IsNull(System.IComparable)">
            <summary>
            Estensione fake per consentire query con NULL tramite linq su proprieta' di tipo valore.
            Non usare nel codice poichè ritorna sempre FALSE
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Extensions.IsNotNull(System.IComparable)">
            <summary>
            Estensione fake per consentire query con NULL tramite linq su proprieta' di tipo valore
            Non usare nel codice poichè ritorna sempre TRUE
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Extensions.Like(System.String,System.String)">
            <summary>
            Esegue un confronto con espressione regolare. Se usato in linq SQL valgono solo i wildcard del db di destinazione
            </summary>
            <param name="obj"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.LinqExt">
            <summary>
            Metodi di estensione per espressioni linq
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.LinqExt.AndAlso``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ritorna espressione combinata in AND
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.LinqExt.OrElse``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ritorn espressione combinata in OR
            </summary>
            <typeparam name="T"></typeparam>
            <param name="expression"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.LinqFilter`1">
            <summary>
            Casse filtro per combinare dinamicamente statement linq di ricerca
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Business.Data.Objects.Common.Utils.LinqFilter`1.Result">
            <summary>
            Ritorna espressione risultato delle operazioni eseguite.
            In caso di nessuna operazione ritorna una generica espressione sempre vera (1=1)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.LinqFilter`1.And(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Aggiunge Condizione AND
            </summary>
            <param name="exp"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.LinqFilter`1.Or(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Aggiunge condizione OR
            </summary>
            <param name="exp"></param>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.Mailer">
            <summary>
            Classe per l'invio email generico
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Mailer.#ctor">
            <summary>
            Crea mailer utilizzando i settaggi standard del file di configurazione
            (System.Net)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Mailer.#ctor(System.String,System.Int32)">
            <summary>
            Crea Mailer fornendo specificamente le informazioni smtp
            senza utilizzo di autenticazione
            </summary>
            <param name="smtpServer"></param>
            <param name="smtpPort"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Mailer.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Crea Mailer fornendo specificamente le informazioni smtp
            e le credenziali di autenticazione senza utilizzo di SSL 
            </summary>
            <param name="smtpServer"></param>
            <param name="smtpPort"></param>
            <param name="user"></param>
            <param name="pass"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Mailer.#ctor(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Crea Mailer fornendo specificamente le informazioni smtp
            e le credenziali di autenticazione
            </summary>
            <param name="smtpServer"></param>
            <param name="smtpPort"></param>
            <param name="user"></param>
            <param name="pass"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Mailer.Send(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Esegue invio email fornendo tutti i parametri disponibili
            </summary>
            <param name="from">
            Se non fornito utilizza configurazione system.net
            </param>
            <param name="to">
            Destinatari
            </param>
            <param name="cc">
            Destinatari in copia conoscenza
            </param>
            <param name="bcc">
            Destinatari in copia nascosta
            </param>
            <param name="subject">
            Oggetto
            </param>
            <param name="htmlbody">
            Body html
            </param>
            <param name="attachments">
            Lista di nomi file separati da , o ;
            </param>
            <param name="headers">
            Collezione di coppie Nome->Valore da utilizzare nell'header
            </param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Mailer.SendAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Esegue invio asincrono (su thread separato)
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="cc"></param>
            <param name="bcc"></param>
            <param name="subject"></param>
            <param name="htmlbody"></param>
            <param name="attachments"></param>
            <param name="headers"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Mailer.normalizeAddresses(System.String)">
            <summary>
            normalizza elenco indirizzi email su unica stringa
            </summary>
            <param name="addressesIn"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.Message">
            <summary>
            Identifica un messaggio di esecuzione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.Message.ToXml">
            <summary>
            Rappresentazione XML del messaggio
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.MessageList">
            <summary>
            Classe di tipo elenco messaggi
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Common.Utils.MessageList.HasErrors">
            <summary>
            Indica se presenti messaggi di errore
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.CountForSeverity(Business.Data.Objects.Common.ESeverity)">
            <summary>
            Ritorna il numero di messaggi di una certa severità
            </summary>
            <param name="severity"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.ToXml">
            <summary>
            Ritorna la rappresentazione Xml.
            </summary>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.Add(System.Int32,System.String,Business.Data.Objects.Common.ESeverity,System.String)">
            <summary>
            Aggiunge messaggio di tipo impostabile
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="severity"></param>
            <param name="uifiled"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.Add(System.Int32,System.String,Business.Data.Objects.Common.ESeverity)">
            <summary>
            Aggiunge messaggio di tipo impostabile senza nome campo UI
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="severity"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddError(System.Int32,System.String,System.String)">
            <summary>
            Aggiunge messaggio errore
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="uifield"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddError(System.Int32,System.String)">
            <summary>
            Aggiunge messaggio errore senza campo UI assosciato
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddError(System.String)">
            <summary>
            Aggiunge messaggio errore solo testuale
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddInfo(System.Int32,System.String,System.String)">
            <summary>
            Aggiunge messaggio info
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="uifield"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddInfo(System.Int32,System.String)">
            <summary>
            Aggiunge messaggio info senza campo UI associato
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddInfo(System.String)">
            <summary>
            Aggiunge messaggio info solo testuale
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddWarn(System.Int32,System.String,System.String)">
            <summary>
            Aggiunge messaggio warning
            </summary>
            <param name="code"></param>
            <param name="message"></param>
            <param name="uifield"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddWarn(System.Int32,System.String)">
            <summary>
            Aggiunge messaggio warning senza campo UI associato
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddWarn(System.String)">
            <summary>
            Aggiunge messaggio solo testuale
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.MessageList.AddFormat(System.Int32,Business.Data.Objects.Common.ESeverity,System.String,System.Object[])">
            <summary>
            Aggiunge messaggio con codice, sevarita' e messaggio in notazione String.Format
            </summary>
            <param name="code"></param>
            <param name="severity"></param>
            <param name="messageFmt"></param>
            <param name="args"></param>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.PasswordGen">
            <summary>
            Classe per la generazione di password
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.PasswordGen.Generate(System.String)">
            <summary>
            Genera password fornendo una maschera di generazione.
            Ammessi: [A]ny, [L]ower, [U]pper, [N]umber, [S]pecial
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.SimpleAes">
            <summary>
            Simple encryption/decryption using a random initialization vector
            and prepending it to the crypto text.
            </summary>
            <remarks>Based on multiple answers in http://stackoverflow.com/questions/165808/simple-two-way-encryption-for-c-sharp </remarks>
        </member>
        <member name="F:Business.Data.Objects.Common.Utils.SimpleAes.IvBytes">
            <summary>
                Initialization vector length in bytes.
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.SimpleAes.Dispose">
            <summary>
            Pulizia
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.SimpleAes.Decrypt(System.String)">
            <summary>
            Decripta stringa in notazione Base64
            </summary>
            <param name="encrypted"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.SimpleAes.Encrypt(System.String)">
            <summary>
            Cripta stringa e ritorna notazione Base64
            </summary>
            <param name="unencrypted"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.StringHelper">
            <summary>
            Classe con metodi comuni relativi alle stringhe
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.StringHelper.RemoveAccents(System.String)">
            <summary>
            Rimuove eventuali accenti e sostituisce con apici
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.StringHelper.RemoveDiacritics(System.String)">
            <summary>
            Routine di rimozione e riconduzione caratteri strani
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.StringHelper.TruncateMaxChar(System.String,System.Int32)">
            <summary>
            Tronca una stringa alla dimensione fornita se piu' lunga
            </summary>
            <param name="value"></param>
            <param name="maxChars"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.StringHelper.SplitSize(System.String,System.Int32)">
            <summary>
            Suddivide la stringa originale in N sottostringhe di dimensioni uguali a size (tranne l'ultima)
            </summary>
            <param name="value"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.StringHelper.Reverse(System.String)">
            <summary>
            Data una string ritorna la stessa inversa
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.TypeHelper">
            <summary>
            Contiene metodi statici di supporto alla gestione dei tipi 
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.TypeHelper.IsNumericType(System.Type)">
            <summary>
            Verifica se trattasi di tipo numerico
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.TypeHelper.IsString(System.Type)">
            <summary>
            Indica se tipo stringa
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.TypeHelper.IsDate(System.Type)">
            <summary>
            Indica se il tipo e' una data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.TypeHelper.IsDecimalType(System.Type)">
            <summary>
            Indica se tipo decimale (decimal, float, double)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.TypeHelper.IsIntegerType(System.Type)">
            <summary>
            Indica se tipo intero (byte, int16, int32, int64, ...)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.TypeHelper.IntegerSize(System.Type)">
            <summary>
            Dato un tipo intero ritorna la dimensione
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.TypeHelper.IsByteArray(System.Type)">
            <summary>
            Indica se trattasi di array di byte
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Common.Utils.XmlWrite">
            <summary>
            Classe utility per scrivere xml con un solo oggetto
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.Reset">
            <summary>
            Resetta contenuto
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteStartElement(System.String)">
            <summary>
            Scrive elemento iniziale
            </summary>
            <param name="nomeElemento"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteEndElement">
            <summary>
            Scrive elemento finale
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteElementString(System.String,System.String)">
            <summary>
            Scrive elemento con valore
            </summary>
            <param name="nomeElemento"></param>
            <param name="valore"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteRaw(System.String)">
            <summary>
            Scrive XML senza controllo
            </summary>
            <param name="rawXml"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteValue(System.Object)">
            <summary>
            Scrive valore all'interno del tag
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteAttributeString(System.String,System.String)">
            <summary>
            Scrive attributo
            </summary>
            <param name="nome"></param>
            <param name="valore"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteBase64(System.Byte[])">
            <summary>
            Scrive dati in base64
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteCData(System.String)">
            <summary>
            Scrive CDATA
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.WriteComment(System.String)">
            <summary>
            Scrive commento
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Common.Utils.XmlWrite.ToString">
            <summary>
            Ritorna Output Xml
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.CommonDataBase">
            <summary>
            Classe Astratta da cui derivano quelle specializzate: gran parte delle proprietà
            e dei Metodi risiedono qui
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.ProviderAssembly">
            <summary>
            Assembly di riferimento del provider
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.ProviderFactoryClass">
            <summary>
            Classe del factory provider
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.ProviderFactory">
            <summary>
            Istanza del factory corrente
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.TypeMapper">
            <summary>
            Mappatore tipi .NET -> tipi DB
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Database.CommonDataBase.AssFactoryDictionary">
            <summary>
            Contiene la lista di tutti gli assembli Ado caricati nell'Applicazione (Web o Client) corrente
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.LastAutoIdFunction">
            <summary>
            Ritorna il nome della funzione per la cattura dell'ultimo Id inserito automaticamente
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.Stats">
            <summary>
            Statistiche di utilizzo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.DbType">
            <summary>
            Ritorna tipo database
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.ConnectionString">
            <summary>
            Ritorna connection string utilizzata
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.ExecutionTimeout">
            <summary>
            Ritorna o imposta il timeout di esecuzione query (secondi)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.CommandType">
            <summary>
            Ottiene o imposta la tipologia di comando che si vuole eseguire:
            - Sql standard
            - Stored Procedure
            - Tabella diretta
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.AutoCloseConnection">
            <summary>
            ottiene o imposta il comportamento della connessione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.Parameters">
            <summary>
            Lista dei parametri attualmente presenti
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.SQL">
            <summary>
            SQL da eseguire (o eseguito)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.TotRecordQueryPaginata">
            <summary>
            Numero Totale Records calcolati dopo l'ultima OpenQuery paginata
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.TraceON">
            <summary>
            Abilita o disabilita la registrazione dei dati di esecuzione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.TraceOnlyErrors">
            <summary>
            Se TraceON abilita il trace dei soli
            errori
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.IsInTransaction">
            <summary>
            Indica se si e' in un contesto transazionale
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.HasAcquiredLocks">
            <summary>
            Indica se presenti lock in atto
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.IsPendingTransaction">
            <summary>
            Indica se e' stato richiesto avvio transazione ma effettivamente ancora non e' stata aperta in quanto non eseguita la connessione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.IsConnectionOpen">
            <summary>
            Indica se la connessione e' attiva
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.CanAutoCloseConnection">
            <summary>
            Indica se possibile chiudere la connessione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.HashCode">
            <summary>
            Codice hash della connessione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.CommonDataBase.TransactionDefaultIsolation">
            <summary>
            Isolamento di default della transazione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.#ctor(System.String)">
            <summary>
            Costruttore pubblico
            </summary>
            <param name="connString"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.Clone">
            <summary>
            Clona una connessione DB
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.EnableTrace(Business.Data.Objects.Common.Logging.LoggerBase,System.Boolean)">
            <summary>
            Abilita logging fornendo un filelogger specifico
            </summary>
            <param name="logger"></param>
            <param name="onlyErrors"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.EnableTrace(System.String,System.Boolean)">
            <summary>
            Abilita il trace degli statement SQL su file
            </summary>
            <param name="traceFilePath"></param>
            <param name="onlyErrors"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.DisableTrace">
            <summary>
            Disabilita trace degli statement SQl
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.BeginTransaction">
            <summary>
            Inizia nuova transazione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Inizia nuova transazione con specifica dell'isolation level
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.CommitTransaction">
            <summary>
            Esegue Commit
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.RollbackTransaction">
            <summary>
            Esegue rollback
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetLastAutoId">
            <summary>
            Ritorna l'Ultimo ID Autoincrement/Identity inserito
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetNewGeneratorId(System.String)">
            <summary>
            Ritorna un nuovo id ottenuto attraverso un generatore
            </summary>
            <param name="generatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.ExecQuery">
            <summary>
            esegue una query non di selezione (INSERT, UPDATE, DELETE, DDL, ..)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.ExecScalar">
            <summary>
            esegue una query selezione tornando solo la prima colonna della prima riga (oppure null)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.ExecReader">
            <summary>
            esegue una query selezione tornando un DbDataReader
            </summary>
            <returns>
            DataReader Associato ai dati
            </returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.ExecReaderPaged(System.Int32,System.Int32)">
            <summary>
            Esegue query paginata con output datareader
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.Select">
            <summary>
            Esegue una select e ritorna la datatable con i dati
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.SelectM">
            <summary>
            Esegue query di selezione e ritorna un dataset. Utile per query concatenate che ritornano set di dati multipli 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.Select(System.Int32,System.Int32)">
            <summary>
            Esegue una query e ritorna parte del risultato su dataset come da specifiche
            E' possibile eseguire l'override nelle classi specializzate per utilizzare
            costrutti propri del db (vedi Mysql)
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="F:Business.Data.Objects.Database.CommonDataBase._DtoBinder">
            <summary>
            Dizionario concorrente per le mappature delle query
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.Query``1(System.Int32,System.Int32)">
            <summary>
            Esegue una query paginata e mappa i dati sull'oggetto di tipo T
            Vengono mappati i campi pubblici di istanza se il risultato non e' null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="page"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.Query``1">
            <summary>
            Esegue una query con mappatura su oggetti
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.MapDataToObject``1(System.Data.Common.DbDataReader,``0)">
            <summary>
            Maps a SqlDataReader record to an object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dataReader"></param>
            <param name="newObject"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.CreateParamName(System.String)">
            <summary>
            Ritorna nome parametro compatibile a partire da una stringa
            </summary>
            <param name="baseName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.AddParameter(System.String,System.Object)">
            <summary>
            Aggiunge parametro con nome e valore
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.AddParameter(System.String,System.Object,System.Type)">
            <summary>
            Aggiunge parametro con nome e valore e tipo
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Aggiunge parametro
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.AddParameters(System.Collections.Generic.IList{System.Data.Common.DbParameter})">
            <summary>
            Aggiunge elenco parametri
            </summary>
            <param name="paramlist"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.ClearParameters">
            <summary>
            Elimina tutti i parametri
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.CreateParameter(System.String,System.Object,System.Type)">
            <summary>
            Crea parametro per nome, valore e tipo .NET
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Crea parametro per nome, valore e tipo del driver DB
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.CloseConnection(System.Boolean)">
            <summary>
            Chiude la connessione (se aperta)
            </summary>
            <param name="rollbackUnCommitted"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.BeginThreadSafeWork">
            <summary>
            Inizia una sessione Atomica di lavoro
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.EndThreadSafeWork">
            <summary>
            Termina una sessione atomica di lavoro
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetLock(System.String,System.Int32)">
            <summary>
            Ottiene un lock globale a livello di applicazione
            per una risorsa identificata da un nome
            </summary>
            <param name="lockName"></param>
            <param name="timeoutsec"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.ReleaseLock(System.String)">
            <summary>
            Rilascia un lock globale precedentemente
            acquisito
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.Reset">
            <summary>
            Resetta contesto di esecuzione db
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetCurrentQueryHashString(System.Int32,System.Int32)">
            <summary>
            Ritorna un codice hash rappresentativo della query che si sta per eseguire
            </summary>
            <param name="pos"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetCurrentQueryHashCode(System.Int32,System.Int32)">
            <summary>
            Ritorna un codice hash rappresentativo della query che si sta per eseguire
            </summary>
            <param name="pos"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetAdoConnection">
            <summary>
            Ritorna connessione ADO sottostante
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetAdoTransaction">
            <summary>
            Ritorna transazione ADO sottostante
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.LockedTransactionBegin(System.String,System.Int32)">
            <summary>
            Richiede lock ed avvia transazione
            </summary>
            <param name="lockName"></param>
            <param name="timeOutSec"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.LockedTransactionCommit(System.String)">
            <summary>
            Committa e rilascia il lock. In caso di eccezione della transazione rilascia comunque il lock e propaga l'eccezione
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.LockedTransactionRollback(System.String)">
            <summary>
            Rollback e rilascia il lock. In caso di eccezione della transazione rilascia comunque il lock e propaga l'eccezione
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.Dispose">
            <summary>
            Rilascio Finale delle risorse con rollback eventuali transazioni non committed
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.registerLock(System.String)">
            <summary>
            Registra il lock nella classe database in modo da tenerne traccia
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.unregisterLock(System.String)">
            <summary>
            Deregistra lock
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.updateStatsFromSQL(System.String)">
            <summary>
            Data una stringa sql aggiorna le statistiche in base al tipo
            </summary>
            <param name="sqlIn"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.OpenConnection">
            <summary>
            Apre la connessione al database
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.checkAutoCloseConnection">
            <summary>
            Se impostata autochiusura e possibile chiudere allora esegue chiusura
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.clearCommand">
            <summary>
            Pulizia comando
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.setTotPagedRecords(System.Int32)">
            <summary>
            Imposta numero record query paginata
            </summary>
            <param name="numRecords"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.createNewTransaction(System.Data.IsolationLevel)">
            <summary>
            Crea nuova transazione
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.getNextTransaction">
            <summary>
            Ritorna la successiva Transazione altrimenti null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.TraceLog(System.String,System.Object[])">
            <summary>
            Scrive Riga Su File di Trace
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.TraceStatement(System.String,System.Exception)">
            <summary>
            Esegue il trace di uno statement
            </summary>
            <param name="position"></param>
            <param name="ex"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.pendingTransReset">
            <summary>
            Resetta l'indicatore di transazione pendente
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.pendingTransSet(System.Data.IsolationLevel)">
            <summary>
            Imposta indicatore transazione pendente
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.GetDbFactory">
            <summary>
            Dato un tipo di factory ritorna una istanza valorizzata
            </summary>
            <param name="facType"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.InitByFactory">
            <summary>
            Carica impostazioni da factory corrente
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.CommonDataBase.InitByADO(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Inizializza attraverso oggetti ADO
            </summary>
            <param name="conn"></param>
            <param name="tran"></param>
            <param name="factory"></param>
        </member>
        <member name="T:Business.Data.Objects.Database.DataBaseException">
            <summary>
            Description of DataBaseException.
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Database.DataBaseFactory">
            <summary>
            Description of DataBaseFactory.
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DataBaseFactory.CreaDataBase(System.String,System.String)">
            <summary>
            Istanzia un oggetto IDataBase dato il nome della classe e la relativa connection string
            </summary>
            <param name="tipoDataBase"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.DataBaseFactory.CreaDataBaseFromADO(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Crea istanza db partendo da connection
            </summary>
            <param name="conn"></param>
            <param name="tran"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.DatabaseList">
            <summary>
            Classe lista database
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DatabaseList.OpenAll">
            <summary>
            Apre tutte le connessioni (se non aperte)
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DatabaseList.CloseAll(System.Boolean)">
            <summary>
            Chiude tutte le connessioni
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DatabaseList.BeginTransAll(System.Data.IsolationLevel)">
            <summary>
            Apre tutte le transazioni con un dato isolation level.
            Se fornito "Unspecified" viene utilizzato quello di default per ciascuna tipologia di db
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.DatabaseList.BeginTransAll">
            <summary>
            Apre transazione su tutti i db
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DatabaseList.CommitAll">
            <summary>
            Esegue Commit su tutti i database
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DatabaseList.RollbackAll">
            <summary>
            Esegue il rollback su tutti i database
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DatabaseList.GetAllStats">
            <summary>
            Statistiche unificate
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.DBStats">
            <summary>
            Classe per statistiche di accesso al DB
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Database.DBStats.EStatement">
            <summary>
            Identifica lo statement eseguito
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Database.DBStats.StatementRecord">
            <summary>
            Identifica un contatore di singolo statement
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DBStats.Reset">
            <summary>
            Azzera contatori
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DBStats.GetCounter(Business.Data.Objects.Database.DBStats.EStatement)">
            <summary>
            Ritorna conteggio per statement
            </summary>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.DBStats.Sum(Business.Data.Objects.Database.DBStats)">
            <summary>
            Aggrega statistiche
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.DBStats.ToXml">
            <summary>
            Ritorna Xml che rappresenta le statistiche
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.DBStats.ToString">
            <summary>
            Ritorna rappresentazione in stringa
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.DbTypeMapper">
            <summary>
            Casse per la mappatura dei tipi NET -> DB
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.DbTypeMapper.StaticMap">
            <summary>
            Espone la mappa di associazione statica e immutabile
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.DbTypeMapper.CurrentMap">
            <summary>
            Espone la mappa di associazione dell'istanza corrente. Se non vengono richieste modifiche coincide con la StaticMap
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.DbTypeMapper.ChangeCurrentMap(System.Type,System.Data.DbType)">
            <summary>
            Modifica la mappatura dell'istanza corrente. Attenzione: la modifica di un mapping comporta la clonazione del mapping di default solo per il database per cui è richiesto
            </summary>
            <param name="t"></param>
            <param name="dbt"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.DbTypeMapper.ChangeCurrentMap``1(System.Data.DbType)">
            <summary>
            Modifica il mapping corrente per questa istanza con tipo esplicito
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dbt"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.DbTypeMapper.ChangeStaticMap(System.Type,System.Data.DbType)">
            <summary>
            Modifica la mappatura statica. la modifica ha effetto su tutti i db instanziati che non hanno modificato la mappatura
            La chiamata va inserita in un metodo statico
            </summary>
            <param name="t"></param>
            <param name="dbt"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.DbTypeMapper.ChangeStaticMap``1(System.Data.DbType)">
             <summary>
            Modifica mappatura statica con tipo esplicito
             </summary>
             <typeparam name="T"></typeparam>
             <param name="dbt"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.DbTypeMapper.GetDbTypeFor(System.Type)">
            <summary>
            Dato un type ritorna il corrispondente dbtype
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.DbTypeMapper.cloneStaticMap">
            <summary>
            Ritorna una copia clonata dello static Map
            </summary>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.IDataBase">
            <summary>
            Interfaccia IDataBase.
            Fornisce i metodi e le proprietà per accedere ad un database, a prescindere dal tipo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.LastAutoIdFunction">
            <summary>
            Nome funzione che ritorna ultimo Id inserito automaticamente
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.HashCode">
            <summary>
            Codice hash relativo alla connessi db (connectionstring)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.AutoCloseConnection">
            <summary>
            Indica se la connessione può essere chiusa quando necessario
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.CanAutoCloseConnection">
            <summary>
            Indica se possibile chiudere la connessione al termine dello statement
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.SQL">
            <summary>
            SQL da eseguire
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.Parameters">
            <summary>
            Lista dei parametri attualmente impostati
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.CommandType">
            <summary>
            Indica il tipo di comando da eseguire
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.DbType">
            <summary>
            Tipo Database
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.ConnectionString">
            <summary>
            Stringa di connessione
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.Stats">
            <summary>
            Statistiche di utilizzo
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.IsInTransaction">
            <summary>
            Indica se ci si trova in un contesto transazionale
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.TransactionDefaultIsolation">
            <summary>
            Indica il livello di isolamento delle transazioni per il db
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.TraceOnlyErrors">
            <summary>
            Abilita il trace dei soli errori
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.ExecutionTimeout">
            <summary>
            Ritorna o imposta il tempo massimo di attesa esecuzione statement (secondi)
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.TypeMapper">
            <summary>
            Mappatore tipi .NET -> tipi DB
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.Clone">
            <summary>
            Clona Database
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.EnableTrace(Business.Data.Objects.Common.Logging.LoggerBase,System.Boolean)">
            <summary>
            Abilita il trace fornendo un logger specifico
            </summary>
            <param name="logger"></param>
            <param name="onlyErrors"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.EnableTrace(System.String,System.Boolean)">
            <summary>
            Abilita trace degli statement SQL su file
            </summary>
            <param name="traceFilePath"></param>
            <param name="onlyErrors"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.DisableTrace">
            <summary>
            Disabilita trace degli statement SQL
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.GetCurrentQueryHashCode(System.Int32,System.Int32)">
            <summary>
            Ritorna un codice hash rappresentativo della query che si sta per eseguire
            </summary>
            <param name="pos"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.GetCurrentQueryHashString(System.Int32,System.Int32)">
            <summary>
            Ritorna una string rappresentativa della query che si sta per eseguire
            </summary>
            <param name="pos"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="P:Business.Data.Objects.Database.IDataBase.TotRecordQueryPaginata">
            <summary>
            Numero Totale Record calcolati nell'ultima OpenQuery paginata
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.GetLastAutoId">
            <summary>
            Ritorna l'Ultimo ID Autoincrement/Identity inserito
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.GetNewGeneratorId(System.String)">
            <summary>
            Ritorna un nuovo id ottenuto attraverso un generatore
            </summary>
            <param name="generatorName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.BeginTransaction">
            <summary>
            Inizia una transazione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Inizia una transazione con un dato IsolationLevel
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.CommitTransaction">
            <summary>
            Commit Transazione in corso
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.RollbackTransaction">
            <summary>
            Rollback Transazione corrente
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.ExecQuery">
            <summary>
            Esegue statement SQL impostato senza tornare dati
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.ExecScalar">
            <summary>
            Esegue statement SQL tornando solo la prima colonna della prima riga (altrimenti NULL)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.ExecReader">
            <summary>
            Esegue statement SQL tornando un Oggetto DbDataReader
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.Select">
            <summary>
            Esegue statement SQL impostato e ritorna dati su datatable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.Select(System.Int32,System.Int32)">
            <summary>
            Esegue statement SQL impostato e ritorna la parte dati richiesta su datatable
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.Query``1">
            <summary>
            Esegue query mappando i dati sull'oggetto T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.Query``1(System.Int32,System.Int32)">
            <summary>
            Esegue query paginata mappando i dati sull'oggetto T e ritornando i dati di paginazione
            </summary>
            <typeparam name="T"></typeparam>
            <param name="page"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.AddParameter(System.String,System.Object)">
            <summary>
            Aggiunge paramtro con nome, valore e tipo
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.AddParameter(System.String,System.Object,System.Type)">
            <summary>
            Aggiunge paramtro con nome, valore e tipo .NET
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.AddParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Aggiunge paramtro con nome, valore e tipo DB (driver)
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.AddParameter(System.Data.Common.DbParameter)">
            <summary>
            Aggiunge parametro creato in precedenza
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.AddParameters(System.Collections.Generic.IList{System.Data.Common.DbParameter})">
            <summary>
            Aggiunge lista di parametri
            </summary>
            <param name="paramlist"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.ClearParameters">
            <summary>
            Elimina tutti i parametri correnti
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.CreateParameter(System.String,System.Object,System.Type)">
            <summary>
            Crea paramtro con nome, valore e tipo db senza aggiungerlo
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.CreateParameter(System.String,System.Object,System.Data.DbType)">
            <summary>
            Crea paramtro con nome, valore e tipo db (driver) senza aggiungerlo
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbtype"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.CreateParamName(System.String)">
            <summary>
            Ritorna nome parametro compatibile con il database specificato.
            </summary>
            <param name="baseName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.CloseConnection(System.Boolean)">
            <summary>
            Forza la chiusura della connessione
            </summary>
            <param name="rollbackUnCommitted">
            Specifica se bisogna eseguire il RollBack (oppure il Commit) della transazione eventualmente aperta
            </param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.OpenConnection">
            <summary>
            Forza apertura connessione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.BeginThreadSafeWork">
            <summary>
            Inizia una sessione thread-safe di lavoro
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.EndThreadSafeWork">
            <summary>
            Termina una sessione thread-safe di lavoro
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.GetLock(System.String,System.Int32)">
            <summary>
            Ottiene un lock globale a livello di applicazione
            per una risorsa identificata da un nome
            </summary>
            <param name="lockName"></param>
            <param name="timeoutsec"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.ReleaseLock(System.String)">
            <summary>
            Rilascia un lock globale precedentemente
            acquisito
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.HasLock(System.String)">
            <summary>
            Indica se presente un lock con nome
            </summary>
            <param name="lockName"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.Reset">
            <summary>
            Resetta lo stato di esecuzione del database
            In particolare elimina eventuali parametri
            mai utilizzati
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.GetAdoConnection">
            <summary>
            Ritorna connessione sottostante
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.GetAdoTransaction">
            <summary>
            Ritorna transazione sottostante
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.LockedTransactionBegin(System.String,System.Int32)">
            <summary>
            Richiede lock ed avvia transazione
            </summary>
            <param name="lockName"></param>
            <param name="timeOutSec"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.LockedTransactionCommit(System.String)">
            <summary>
             Committa e rilascia il lock. In caso di eccezione della transazione rilascia comunque il lock e propaga l'eccezione
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.IDataBase.LockedTransactionRollback(System.String)">
            <summary>
             Rollback e rilascia il lock. In caso di eccezione della transazione rilascia comunque il lock e propaga l'eccezione
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="T:Business.Data.Objects.Database.MSSQL2005DataBase">
            <summary>
            Description of MSSQLDataBase.
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Database.MSSQL2005DataBase._PAGED_REGEX">
            <summary>
            Regex per cercare primo statement di selct che puo' avere o meno distinct e top
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2005DataBase.#ctor(System.String)">
            <summary>
            Costruttore base 
            </summary>
            <param name="connString"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2005DataBase.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Costruttore specifico
            </summary>
            <param name="conn"></param>
            <param name="tran"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2005DataBase.preparePagedQuery(System.Int32,System.Int32)">
            <summary>
            Imposta query paginata
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2005DataBase.GetLastAutoId">
            <summary>
            Ritorna l'Ultimo ID Autoincrement/Identity inserito
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2005DataBase.Select(System.Int32,System.Int32)">
            <summary>
            Esegue query paginata
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2005DataBase.ExecReaderPaged(System.Int32,System.Int32)">
            <summary>
            Esegue query paginata con reader
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.MSSQL2012DataBase">
            <summary>
            Description of MSSQLDataBase.
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Database.MSSQL2012DataBase._PAGED_REGEX">
            <summary>
            Regex per cercare primo statement di select che puo' avere o meno distinct e top
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2012DataBase.#ctor(System.String)">
            <summary>
            Costruttore base 
            </summary>
            <param name="connString"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2012DataBase.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Costruttore specifico
            </summary>
            <param name="conn"></param>
            <param name="tran"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2012DataBase.preparePagedQuery(System.Int32,System.Int32)">
            <summary>
            Imposta query paginata
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQL2012DataBase.Select(System.Int32,System.Int32)">
            <summary>
            Esegue query paginata
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.MSSQLDataBase">
            <summary>
            Description of MSSQLDataBase.
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQLDataBase.#ctor(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Costruttore specifico
            </summary>
            <param name="conn"></param>
            <param name="tran"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQLDataBase.GetLastAutoId">
            <summary>
            Ritorna l'Ultimo ID Autoincrement/Identity inserito
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQLDataBase.GetLock(System.String,System.Int32)">
            <summary>
            Ottiene il lock di una risorsa con nome
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MSSQLDataBase.ReleaseLock(System.String)">
            <summary>
            Rilascia lock precedentemente acquisito
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="T:Business.Data.Objects.Database.MYSQLDataBase">
            <summary>
            Description of MYSQLDataBase.
            
            La connection string deve essere del tipo: DataSource=server;database=db;user=xxx;password=xxx
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.MYSQLDataBase.TransactionDefaultIsolation">
            <summary>
            Isolamento di default della transazione
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.MYSQLDataBase.GetLastAutoId">
            <summary>
            Ritorna l'Ultimo ID Autoincrement/Identity inserito
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.MYSQLDataBase.GetLock(System.String,System.Int32)">
            <summary>
            Ottiene lock su risorsa
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MYSQLDataBase.ReleaseLock(System.String)">
            <summary>
            Rilascia lock su risorsa
            </summary>
            <param name="lockName"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.MYSQLDataBase.Select(System.Int32,System.Int32)">
            <summary>
            Esegue una query e ritorna parte del risultato su dataset come da specifiche
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.MYSQLDataBase.ExecReaderPaged(System.Int32,System.Int32)">
            <summary>
            Esegue query paginata ritornando un DataReader
            </summary>
            <param name="positionIn"></param>
            <param name="offsetIn"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.PGSQLDataBase">
            <summary>
            Classe di gestione Database PostgrsSQL - PGSQLDataBase.
            
            La connection string deve essere del tipo: DataSource=server;database=db;user=xxx;password=xxx
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.PGSQLDataBase.SQL">
            <summary>
            Eseguito override per convertire il nome parametro @ con ?
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.PGSQLDataBase.AddParameter(System.String,System.Object)">
            <summary>
            Eseguito override per convertire il nome parametro @ con ?
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Business.Data.Objects.Database.PGSQLDataBase.GetLastAutoId">
            <summary>
            Ritorna l'Ultimo ID Autoincrement/Identity inserito
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.PGSQLDataBase.GetNewGeneratorId(System.String)">
            <summary>
            Ritorna un nuovo id ottenuto attraverso un generatore
            </summary>
            <param name="generatorName"></param>
            <returns></returns>
        </member>
        <member name="T:Business.Data.Objects.Database.SQLITEDataBase">
            <summary>
            Description of SQLITEDataBase.
            
            La connection string deve essere del tipo: DataSource=server;database=db;user=xxx;password=xxx
            </summary>
        </member>
        <member name="P:Business.Data.Objects.Database.SQLITEDataBase.LastAutoIdFunction">
            <summary>
            Ritorna nome funzione per ultimo id inserito
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Database.SQLITEDataBase.GetLastAutoId">
            <summary>
            Ritorna l'Ultimo ID Autoincrement/Identity inserito
            </summary>
            <returns></returns>
        </member>
        <member name="M:Business.Data.Objects.Database.SQLITEDataBase.clearCommand">
            <summary>
            Pulizia comando - SQLITE ritorna errore se si modifica un commandtext
            a datareader aperto
            </summary>
        </member>
        <member name="T:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventSimpleQueuePOST">
            <summary>
            Coda per la gestione degli eventi POST
            </summary>
        </member>
        <member name="F:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventSimpleQueuePOST.HandledType">
            <summary>
            Tipo gestito
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventSimpleQueuePOST.Run(Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Esegue tutti gli eventi
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventForTypeQueuePOST">
            <summary>
            Coda eventi  per tipo oggetto
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventForTypeQueuePOST.Add(System.Type,Business.Data.Objects.Core.BusinessSlot.BDEventPostHandler)">
            <summary>
            Aggiunge Item
            </summary>
            <param name="handler"></param>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventForTypeQueuePOST.Run(System.Type,Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Esegue la coda
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventMainQueuePOST">
            <summary>
            Gestore coda per tipo evento
            </summary>
        </member>
        <member name="M:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventMainQueuePOST.Add(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,System.Type,Business.Data.Objects.Core.BusinessSlot.BDEventPostHandler)">
            <summary>
            Aggiunge Item
            </summary>
            <param name="handler"></param>
            <param name="input"></param>
            <param name="output"></param>
        </member>
        <member name="M:Business.Data.Objects.Cores.Utils.BdoOnly.SlotEventMainQueuePOST.Run(Business.Data.Objects.Core.BusinessSlot.EObjectEvent,System.Type,Business.Data.Objects.Core.Base.DataObjectBase)">
            <summary>
            Esegue coda per tipo evento
            </summary>
            <param name="evt"></param>
            <param name="value"></param>
        </member>
        <member name="T:Bdo.Utils.Hashing.External.CityHash">
            <summary>
            CityHash provides hash functions for strings. The functions mix the
            input bits thoroughly but are not suitable for cryptography.
            </summary>
            <remarks>
            This class can be inherited and it exposes some internal functions (if you want to have fun). 
            More info at the project site: <see href="https://github.com/knuppe/cityhash"/>
            </remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.Donate">
            <summary>
            Opens a link to donation to the author of the CityHash C# port.
            </summary>
            <remarks>
            It is beautiful to see the code running, but this code almost drove me nuts!! 
            I would really appreciate any support ;-)
            </remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.FMix(System.UInt32)">
            <summary>
            A 32-bit to 32-bit integer hash copied from Murmur3.
            </summary>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.Rotate(System.UInt64,System.Int32)">
            <summary>
            Bitwise right rotate. 
            Normally this will compile to a single instruction, especially if the shift is a manifest constant.
            </summary>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.Fetch32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="index">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="index"/>.</returns>       
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.Fetch32(System.Byte[],System.UInt32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="index">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at <paramref name="index"/>.</returns>        
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.Fetch64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="index">The starting position within <paramref name="value"/>.</param>
            <returns>A 64-bit unsigned integer formed by the eight bytes beginning at <paramref name="index"/>.</returns>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityMurmur(System.Byte[],Bdo.Utils.Hashing.External.uint128,System.Int32)">
            <summary>
            A subroutine for CityHash128().  Returns a decent 128-bit hash for strings
            of any length representable in signed long.  Based on City and Murmur.
            </summary>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash32(System.String)">
            <summary>
            Computes a 32-bit city hash for the specified string.
            </summary>
            <param name="value">The string value.</param>
            <returns>A 32-bit city hash.</returns>
            <remarks>This function encodes the string using the unicode block (ISO/IEC 8859-1).</remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash32(System.Byte[])">
            <summary>
            Computes a 32-bit city hash for the given encoded string.
            </summary>
            <param name="value">The string value.</param>
            <returns>A 32-bit city hash.</returns>
            <exception cref="T:System.ArgumentNullException">value</exception>
            <remarks>
            The city hash is designed to compute hash for STRINGs only! 
            The city hash "works" with other types of data, but keep in mind it was not built for it.
            </remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash64(System.String)">
            <summary>
            Computes the 64-bit city hash for the specified string.
            </summary>
            <param name="value">The string value.</param>
            <returns>The 64-bit city hash.</returns>
            <remarks>This function encodes the string using the unicode block (ISO/IEC 8859-1).</remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash64(System.Byte[])">
            <summary>
            Computes the 64-bit city hash for the encoded string.
            </summary>
            <param name="value">The encoded string.</param>
            <returns>The 64-bit city hash.</returns>
            <remarks>
            The city hash is designed to compute hash for STRINGs only! 
            The city hash "works" with other types of data, but keep in mind it was not built for it.
            </remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash64(System.String,System.UInt64)">
            <summary>
            Computes the 64-bit city hash for the specified string and seed.
            </summary>
            <param name="value">The string value.</param>
            <param name="seed">The seed used by the algorithm.</param>
            <returns>The 64-bit city hash.</returns>
            <remarks>This function encodes the string using the unicode block (ISO/IEC 8859-1).</remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash64(System.String,System.UInt64,System.UInt64)">
            <summary>
            Computes the 64-bit city hash for the specified string and seed.
            </summary>
            <param name="value">The string value.</param>
            <param name="seed0">The low-order 64-bits seed used by the algorithm.</param>
            <param name="seed1">The high-order 64-bits seed used by the algorithm.</param>
            <returns>The 64-bit city hash.</returns>
            <remarks>This function encodes the string using the unicode block (ISO/IEC 8859-1).</remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash64(System.Byte[],System.UInt64)">
            <summary>
            Computes the 64-bit city hash for the specified string and seed.
            </summary>
            <param name="value">The encoded string.</param>
            <param name="seed">The seed used by the algorithm.</param>
            <returns>The 64-bit city hash.</returns>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash64(System.Byte[],System.UInt64,System.UInt64)">
            <summary>
            Computes the 64-bit city hash for the specified string and seed.
            </summary>
            <param name="value">The encoded string.</param>
            <param name="seed0">The low-order 64-bits seed used by the algorithm.</param>
            <param name="seed1">The high-order 64-bits seed used by the algorithm.</param>
            <returns>The 64-bit city hash.</returns>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash128(System.String)">
            <summary>
            Computes the 128-bit city hash and are tuned for strings of at least a few hundred bytes.
            </summary>
            <param name="value">The string value.</param>
            <returns>The 128-bit city hash.</returns>
            <remarks>This function encodes the string using the unicode block (ISO/IEC 8859-1).</remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash128(System.String,Bdo.Utils.Hashing.External.uint128)">
            <summary>
            Computes the 128-bit city hash and are tuned for strings of at least a few hundred bytes using 
            the specified <paramref name="seed"/>.
            </summary>
            <param name="value">The string value.</param>
            <param name="seed">The seed used by the city hash algorithm.</param>
            <returns>The 128-bit city hash.</returns>
            <remarks>This function encodes the string using the unicode block (ISO/IEC 8859-1).</remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash128(System.Byte[])">
            <summary>
            Computes a 128-bit city hash for the given encoded string.
            </summary>
            <param name="value">The encoded string.</param>
            <returns>The 128-bit city hash.</returns>
            <remarks>
            The city hash is designed to compute hash for STRINGs only! 
            The city hash "works" with other types of data, but keep in mind it was not built for it.
            </remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.CityHash128(System.Byte[],Bdo.Utils.Hashing.External.uint128,System.Int32)">
            <summary>
            Computes the 128-bit city hash and are tuned for strings of at least a few hundred bytes using 
            the specified <paramref name="seed"/> starting at a <paramref name="offset"/> position.
            </summary>
            <param name="value">The encoded string.</param>
            <param name="seed">The seed used by the hash alrorithm.</param>
            <param name="offset">The offset position in the byte array.</param>
            <returns>The 128-bit city hash.</returns>
            <remarks>
            The city hash is designed to compute hash for STRINGs only! 
            The city hash "works" with other types of data, but keep in mind it was not built for it.
            </remarks>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.HashLen17to32(System.Byte[])">
            <summary>
            This probably works well for 16-byte strings as well, but it may be overkill in that case.
            </summary>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.HashLen33to64(System.Byte[])">
            <summary>
            Return an 8-byte hash for 33 to 64 bytes.
            </summary>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.CityHash.WeakHashLen32WithSeeds(System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Return a 16-byte hash for 48 bytes. Quick and dirty.
            Callers do best to use "random-looking" values for a and b.
            </summary>
        </member>
        <member name="T:Bdo.Utils.Hashing.External.uint128">
            <summary>
            Represents a 128-bit unsigned integer.
            </summary>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.uint128.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:uint128"/> struct.
            </summary>
        </member>
        <member name="P:Bdo.Utils.Hashing.External.uint128.Low">
            <summary>
            Gets or sets the low-order 64-bits.
            </summary>
            <value>The low-order 64-bits.</value>
        </member>
        <member name="P:Bdo.Utils.Hashing.External.uint128.High">
            <summary>
            Gets or sets the high-order 64-bits.
            </summary>
            <value>The high-order 64-bits.</value>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.uint128.Equals(Bdo.Utils.Hashing.External.uint128)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.uint128.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Bdo.Utils.Hashing.External.uint128.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Bdo.Utils.Hashing.IHashAlgo.Hash(System.String)">
            <summary>
            Hash di dati arbitrari
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Bdo.Utils.Hashing.IHashAlgo.Hash(System.Byte[])">
            <summary>
            Hash di una stringa
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Bdo.Utils.Hashing.IHashAlgo.Hash64(System.String)">
            <summary>
            Hash 64 di dati arbitrari
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Bdo.Utils.Hashing.IHashAlgo.Hash64(System.Byte[])">
            <summary>
            Hash 64 di una stringa
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
    </members>
</doc>
